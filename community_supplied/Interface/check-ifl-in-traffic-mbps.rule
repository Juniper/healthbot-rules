/*
 * Monitors interface input traffic in Mbs and notifies when anomalies are found.
 * Six inputs control detection
 *
 *   1) ifd-name, is a regular expression that matches the
 *      interfaces that you would like to monitor.  By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 *
 *   2) ifl-no, is a regular expression that matches the
 *      interfaces ifl that you would like to monitor.  By default it's
 *      '.*', which matches all sub interfaces.
 *
 *   3) decimal-places, number of decimal places to keep in the mbps output.
 *      By default it's 4.
 *
 *   4) stats-name, is a regular expression that matches the interface KPI
 *      statistics counter name that you would like to monitor. By default it's
 *      in-octets, Use proper counter name something like 'in-pkts' or
 *      "in-unicast-pkts" or "in-multicast-pkts" etc.
 *
 *   5) in-mbps-high-threshold, is the threshold that causes the rule to
 *      report an anomaly.  By default it's 1000 mbps. This rule will
 *      set a dashboard color to red when *all* the input traffic is above
 *      threshold for 180 seconds period.
 *
 *   6) in-mbps-low-threshold, is the threshold that causes the rule to
 *      report an anomaly.  By default it's 700 mbps. This rule will
 *      set a dashboard color to yellow when *all* the input traffic is above
 *      threshold for 180 seconds period, otherwise color is set to green.
 */
healthbot {
    topic interface.statistics {
        rule check-ifl-in-traffic-mbps {
            keys [ interface-name sub-interface-index ];
            synopsis "Sub Interface input traffic analyzer.";
            description "Collects input traffic (in-octets) periodically and notifies in case of traffic is above threshold";
            function octets-to-mbps {
                path generic_functions.py;
                method mbps;
                argument ifl_id {
                    mandatory;
                }
                argument intf_name {
                    mandatory;
                }
                argument octets {
                    mandatory;
                }
            }
            function round_float {
                path round_float.py;
                method round_float;
                argument dec_place {
                    mandatory;
                }
                argument value {
                    mandatory;
                }
            }
            sensor interfaces {
                synopsis "Sub Interface open-config sensor definition";
                description "Sub Interfaces open-config sensor to collect telemetry data from network device";
                /*
                 * Monitors the interface input traffic. Notifies via the dashboard
                 * colors when the traffic is above {{high-threshold}}
                 * for every collected metric (red).
                 * The color is set to yellow when the traffic is above
                 * {{low-threshold}} for every collected metric.
                 * Otherwise the color is set to green.
                 *
                 * Use interface name and sub-interface-index as key for rule.
                 */
                open-config {
                    sensor-name /interfaces/interface/subinterfaces/subinterface/state;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field decimal-place {
                constant {
                    value "{{decimal-places}}";
                }
                type integer;
            }
            field high-threshold {
                constant {
                    value "{{in-mbps-high-threshold}}";
                }
                type integer;
                description "Input traffic high threshold.";
            }
            field in-mbps {
                formula {
                    user-defined-function {
                        function-name octets-to-mbps;
                        argument intf_name "$interface-name";
                        argument octets "$in-octets-stats-value";
                        argument ifl_id "$sub-interface-index";
                    }
                }
                type float;
            }
            field in-mbps-pretty {
                formula {
                    user-defined-function {
                        function-name round_float;
                        argument value "$in-mbps";
                        argument dec_place "$decimal-place";
                    }
                }
                type float;
            }
            field in-octets-stats-value {
                sensor interfaces {
                    path "/interfaces/interface/subinterfaces/subinterface/state/counters/{{stats-name}}";
                    zero-suppression;
                }
                type integer;
                description "Sub Interface statistics counter (in-octets) value.";
            }
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{ifd-name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "Interfaces to be monitored";
            }
            field low-threshold {
                constant {
                    value "{{in-mbps-low-threshold}}";
                }
                type integer;
                description "Input traffic low threshold.";
            }
            field sub-interface-index {
                sensor interfaces {
                    where "/interfaces/interface/subinterfaces/subinterface/@index =~ /{{ifl-no}}/";
                    path "/interfaces/interface/subinterfaces/subinterface/@index";
                }
                type string;
                description "Interfaces to be monitored";
            }
            /*
             * Anomaly detection logic.
             */
            trigger in-traffic {
                synopsis "Sub Interface input traffic kpi";
                description "Sets health based on input traffic exceed threshold.";
                frequency 1.5o;
                term is-interface-in-traffic-abnormal {
                    when {
                        greater-than-or-equal-to "$in-mbps" "$high-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name.$sub-interface-index input traffic ($in-mbps-pretty Mbps) is above high threshold($high-threshold Mbs)";
                        }
                    }
                }
                term is-interface-in-traffic-median {
                    when {
                        greater-than-or-equal-to "$in-mbps" "$low-threshold";
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name.$sub-interface-index input traffic ($in-mbps-pretty Mbps) is in medium range(>=$low-threshold,<=$high-threshold  mbps)";
                        }
                    }
                }
                term interface-in-traffic-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name.$sub-interface-index input traffic:$in-mbps-pretty Mbps is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable decimal-places {
                value 4;
                description "number of decimal places to keep in the mbps output.";
                type int;
            }
            variable ifd-name {
                value .*;
                description "Interfaces to be monitored, regular expression, eg 'ge-.*'";
                type string;
            }
            variable ifl-no {
                value .*;
                description "Sub interfaces index to be monitored, regular expression, eg '0-10'";
                type string;
            }
            variable in-mbps-high-threshold {
                value 1000;
                description "Sub Interface input traffic high threshold value in mbps. ";
                type int;
            }
            variable in-mbps-low-threshold {
                value 700;
                description "Sub Interface input traffic low threshold value in mbps.";
                type int;
            }
            variable stats-name {
                value in-octets;
                description "Sub Interface input traffic counter name";
                type string;
            }
            rule-properties {
                version 2;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                releases 17.3R1 {
                                    release-support min-supported-release;
                                    platform EX9200;
                                }
                                releases 18.3R1 {
                                    release-support min-supported-release;
                                    platform EX4650;
                                }
                                releases 18.4R1 {
                                    release-support min-supported-release;
                                    platform EX4600;
                                }
                            }
                            products MX {
                                releases 16.1R1 {
                                    release-support min-supported-release;
                                    platform [ MX2010 MX2020 MX240 MX480 MX960 ];
                                }
                                releases 17.3R1 {
                                    release-support min-supported-release;
                                    platform MX150;
                                }
                            }
                            products PTX {
                                releases 17.2R1 {
                                    release-support min-supported-release;
                                    platform [ PTX1000 PTX10000 PTX5000 ];
                                }
                            }
                            products QFX {
                                releases 17.2R1 {
                                    release-support min-supported-release;
                                    platform [ QFX10000 QFX5200 ];
                                }
                                releases 18.1R1 {
                                    release-support min-supported-release;
                                    platform QFX5100;
                                }
                                releases 18.3R1 {
                                    release-support min-supported-release;
                                    platform QFX5120-48Y;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
