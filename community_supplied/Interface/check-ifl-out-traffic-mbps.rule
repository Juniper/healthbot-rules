/*
 * Monitors interface output traffic in mbps and notifies when anomalies are found.
 * Six inputs control detection
 *
 *   1) ifd-name, is a regular expression that matches the
 *      interfaces that you would like to monitor.  By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 *
 *   2) ifl-no, is a regular expression that matches the
 *      interfaces ifl that you would like to monitor.  By default it's
 *      '.*', which matches all sub interfaces.
 *
 *   3) decimal-places, number of decimal places to keep in the mbps output.
 *      By default it's 4.
 *
 *   4) stats-name, is a regular expression that matches the interface KPI
 *      statistics counter name that you would like to monitor.
 *
 *   5) out-mbps-high-threshold, is the threshold that causes the rule to
 *      report an anomaly.  By default it's 1000 mbps. This rule will
 *      set a dashboard color to red when *all* the output traffic is above
 *      threshold for 180 seconds period.
 *
 *   6) out-mbps-low-threshold, is the threshold that causes the rule to
 *      report an anomaly.  By default it's 700 mbps. This rule will
 *      set a dashboard color to yellow when *all* the output traffic is above
 *      threshold for 180 seconds period, otherwise color is set to green.
 */
healthbot {
    topic interface.statistics {
        rule check-ifl-out-traffic-mbps {
            keys [ interface-name sub-interface-index ];
            synopsis "Sub Interface output traffic analyzer.";
            description "Collects output traffic (out-octets) periodically and notifies in case of traffic is above threshold";
            function octets-to-mbps {
                path generic_functions.py;
                method mbps;
                argument ifl_id {
                    mandatory;
                }
                argument intf_name {
                    mandatory;
                }
                argument octets {
                    mandatory;
                }
            }
            function round_float {
                path round_float.py;
                method round_float;
                argument dec_place {
                    mandatory;
                }
                argument value {
                    mandatory;
                }
            }
            /*
             * Monitors the interface output traffic. Notifies via the dashboard
             * colors when the traffic is above {{high-threshold}}
             * for every collected metric during a 180s time range (red).
             * The color is set to yellow when the traffic is above
             * {{low-threshold}} for every collected metric during
             * a 180s. Otherwise the color is set to green.
             *
             * Use interface name and sub-interface-index as key for rule.
             */
            sensor interfaces {
                synopsis "Sub Interface open-config sensor definition";
                description "Sub Interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/interface/subinterfaces/subinterface/state;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field decimal-place {
                constant {
                    value "{{decimal-places}}";
                }
                type integer;
            }
            field high-threshold {
                constant {
                    value "{{out-mbps-high-threshold}}";
                }
                type integer;
                description "Output traffic high threshold.";
            }
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{ifd-name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "Interfaces to be monitored";
            }
            field low-threshold {
                constant {
                    value "{{out-mbps-low-threshold}}";
                }
                type integer;
                description "Output traffic low threshold.";
            }
            field out-mbps {
                formula {
                    user-defined-function {
                        function-name octets-to-mbps;
                        argument intf_name "$interface-name";
                        argument octets "$out-octets-stats-value";
                        argument ifl_id "$sub-interface-index";
                    }
                }
                type float;
            }
            field out-mbps-pretty {
                formula {
                    user-defined-function {
                        function-name round_float;
                        argument value "$out-mbps";
                        argument dec_place "$decimal-place";
                    }
                }
                type float;
            }
            field out-octets-stats-value {
                sensor interfaces {
                    path "/interfaces/interface/subinterfaces/subinterface/state/counters/{{stats-name}}";
                    zero-suppression;
                }
                type integer;
                description "Sub Interface statistics counter (out-octets) value.";
            }
            field sub-interface-index {
                sensor interfaces {
                    where "/interfaces/interface/subinterfaces/subinterface/@index =~ /{{ifl-no}}/";
                    path "/interfaces/interface/subinterfaces/subinterface/@index";
                }
                type string;
                description "Interfaces to be monitored";
            }
            /*
             * Anomaly detection logic.
             */
            trigger out-traffic {
                synopsis "Sub Interface output traffic kpi";
                description "Sets health based on output traffic exceed threshold.";
                frequency 1.5offset;
                term is-interface-out-traffic-abnormal {
                    when {
                        greater-than-or-equal-to "$out-mbps" "$high-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name.$sub-interface-index output traffic ($out-mbps-pretty Mbps) is above high threshold($high-threshold Mbps)";
                        }
                    }
                }
                term is-interface-out-traffic-median {
                    when {
                        greater-than-or-equal-to "$out-mbps" "$low-threshold";
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name.$sub-interface-index output traffic ($out-mbps-pretty Mbps) is in medium range(>=$low-threshold,<=$high-threshold  Mbps)";
                        }
                    }
                }
                term interface-out-traffic-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name.$sub-interface-index output traffic:$out-mbps-pretty Mbps is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable decimal-places {
                value 4;
                description "Decimal places for rounded Mbps value.";
                type int;
            }
            variable ifd-name {
                value .*;
                description "Interfaces to be monitored, regular expression, eg 'ge-.*'";
                type string;
            }
            variable ifl-no {
                value .*;
                description "Sub interfaces index to be monitored, regular expression, eg '0-10'";
                type string;
            }
            variable out-mbps-high-threshold {
                value 1000;
                description "Sub Interface output traffic high threshold value in mbps.";
                type int;
            }
            variable out-mbps-low-threshold {
                value 700;
                description "Sub Interface output traffic low threshold value in mbps";
                type int;
            }
            variable stats-name {
                value out-octets;
                description "Sub Interface output traffic counter name";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                platforms EX9200 {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                                platforms EX4650 {
                                    releases 18.3R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                                platforms EX4600 {
                                    releases 18.4R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }						
                            products MX {
                                platforms MX240 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX480 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX960 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX2010 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX2020 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX150 {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products PTX {
                                platforms PTX5000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms PTX1000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms PTX10000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products QFX {
                                platforms QFX10000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms QFX5200 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                                platforms QFX5100 {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                                platforms QFX5120-48Y {
                                    releases 18.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                        }
                    }
                }
            }
        }
    }
}
