/*
* Detects interface throughput utilization and notifies when
* anomalies are found.
* Two input control detection
*
* 1) interface-name, is a regular expression that matches the
* interfaces that you would like to monitor. By default it is '.*',
* which matches all interfaces. Use something like 'ge.*' to
* match only gigabit ethernet interfaces.
*
* 2) threshold, is the threshold that causes the rule to report
* an anomaly. By default it is 75.00 %. This rule will set a
* dashboard color to red when io throughput utilization percent
* exceeds threshold value. If dynamic threshold of io throughput
* utilization is equal to 1, the color is set to yellow. Otherwise
* it is set to green.
*/
healthbot {
    topic interface.throughput {
        description "Rules that monitor interface throughput and react to changes";
        synopsis "Interface throughput analysis";
        rule check-interface-throughput-oc {
            synopsis "Interface throughput threshold crossing";
            description "Monitors interface throughput and generates triggers on customizable threshold crossing";    
            keys interface-name;
            /*
            * Monitors interface input and output throughput utilization. Notifies via the
            * dashboard colors when interface io throughput utilization exceeds the high
            * threshold {{$threshold}} it sets the color to red. The color is
            * set to yellow if dynamic threshold {{$dt-in-bw-util}} or {{$dt-out-bw-util}}
            * of io throughput is equal to 1. Otherwise the color is set to green.
            *
            * Use interface-name as key for rule
            *
            *
            * Sensor configuration to get data from network devices.
            */
            sensor interfaces {
                synopsis "Interface open-config sensor definition";
                description "Interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/interface/state;
                    frequency 90s;
                }
            }
            /*
            * Fields defined using formulae by user-defined function
            */
            field in-bw-util {
                formula {
                    eval {
                        expression "( $in-mbps / $speed ) * 100";
                    }
                }
                type float;
                description "Input bandwidth utilization";
            }
            field in-mbps {
                formula {
                    rate-of-change {
                        field-name "$input-bytes";
                        multiplication-factor 0.000001;
                    }
                }
                type float;
            }
            field out-bw-util {
                formula {
                    eval {
                        expression "( $out-mbps / $speed ) * 100";
                    }
                }
                type float;
                description "Output bandwidth utilization";
            }
            field out-mbps {
                formula {
                    rate-of-change {
                        field-name "$output-bytes";
                        multiplication-factor 0.000001;
                    }
                }
                type float;
            }
            /*
            * Field defined using machine learning algorithms
            */
            field dt-in-bw-util {
                formula {
                    anomaly-detection {
                        algorithm 3sigma;
                        learning-period 7d;
                        pattern-periodicity 1h;
                        field-name "$in-bw-util";
                    }
                }
                type integer;
                description "ML anomaly detection Input bandwidth utilization field";
            }
            field dt-out-bw-util {
                formula {
                    anomaly-detection {
                        algorithm 3sigma;
                        learning-period 7d;
                        pattern-periodicity 1h;
                        field-name "$out-bw-util";
                    }
                }
                type integer;
                description "ML anomaly detection output bandwidth utilization field";
            }
            field predicted-in-bw-util {
                formula {
                    predict {
                        algorithm median-prediction;
                        learning-period 1d;
                        pattern-periodicity 1h;
                        field-name "$in-bw-util";
                        prediction-offset 1d;
                    }
                }
                type float;
                description "ML predicted input bandwidth utilization";
            }
            field predicted-out-bw-util {
                formula {
                    predict {
                        algorithm median-prediction;
                        learning-period 1d;
                        pattern-periodicity 1h;
                        field-name "$out-bw-util";
                        prediction-offset 1d;
                    }
                }
                type float;
                description "ML predicted output bandwidth utilization";
            }
            /*
            * Field defined using sensor path. Map the longer sensor names
            * to the shorter field names used in the rules.
            */
            field input-bytes {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/in-octets";
                    zero-suppression;
                }
                type integer;
                description "Interface statistics counter (in-octets) value";
            }
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{interface-name-variable}}/";
                    where "/interfaces/interface/state/high-speed != 0";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "Interfaces to be monitored";
            }
            field output-bytes {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/out-octets";
                    zero-suppression;
                }
                type integer;
                description "Interface statistics counter (out-octets) value";
            }
            field speed {
                sensor interfaces {
                    path "/interfaces/interface/state/high-speed";
                    zero-suppression;
                }
                type string;
                description "Collected interface speed";
            }
            /*
            * Field defined with variable and constant value
            */
            field threshold {
                constant {
                    value "{{threshold}}";
                }
                type float;
                description "Interface bandwidth utilization increase threshold";
            }
            /*
            * Anomaly detection logic.
            */
            trigger in-bw-utilization {
                synopsis "Interface input bandwidth utilization ";
                description "Sets health based on the change in input bandwidth utilization";
                frequency 1o;
                /*
                * Sets color to red and sends out an anomaly notification when
                * the input bandwidth utilization ($in-bw-util %) is greater than
                * the threshold ($threshold %).
                */
                term is-input-bandwidth-abnormal {
                    when {
                        greater-than-or-equal-to "$in-bw-util" "$threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name input bandwidth utilization ($in-bw-util %) crossed threshold value ($threshold %). Mbps:$in-mbps Input bytes:$input-bytes";
                        }
                    }
                }
                /*
                * Sets color to yellow and sends out an anomaly notification when
                * the dynamic threshold ($dt-in-bw-util) of input bandwidth
                * utilization is equal to 1.
                */
                term is-input-bandwidth-above-dt {
                    when {
                        equal-to "$dt-in-bw-util" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name input bandwidth utilization ($in-bw-util %) is above the dynamic threshold. Mbps:$in-mbps Input Bytes:$input-bytes Predicted BW utilization:$predicted-in-bw-util";
                        }
                    }
                }
                /*
                * Defaults color to green.
                */
                term is-input-bandwidth-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name input bandwidth utilization ($in-bw-util %) is normal. Mbps:$in-mbps Input bytes:$input-bytes";
                        }
                    }
                }
            }
            trigger out-bw-utilization {
                synopsis "Interface output bandwidth utilization ";
                description "Sets health based on the change in output bandwidth utilization";
                frequency 1o;
                /*
                * Sets color to red and sends out an anomaly notification when
                * the output bandwidth utilization ($out-bw-util %) is greater than
                * the threshold ($threshold %).
                */
                term is-output-bandwidth-abnormal {
                    when {
                        greater-than-or-equal-to "$out-bw-util" "$threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name output bandwidth utilization($out-bw-util%) crossed threshold value ($threshold %). Mbps:$out-mbps Output bytes:$output-bytes";
                        }
                    }
                }
                /*
                * Sets color to yellow and sends out an anomaly notification when
                * the dynamic threshold ($dt-out-bw-util) of output bandwidth
                * utilization is equal to 1.
                */
                term is-output-bandwidth-above-dt {
                    when {
                        equal-to "$dt-out-bw-util" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name output bandwidth utilization ($out-bw-util %) is above dynamic threshold. Mbps:$out-mbps Output Bytes:$output-bytes Predicted BW utilization:$predicted-out-bw-util";
                        }
                    }
                }
                /*
                * Defaults color to green.
                */
                term is-output-bandwidth-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name output bandwidth utilization ($out-bw-util %) is normal. Mbps:$out-mbps Output bytes:$output-bytes";
                        }
                    }
                }
            }
            /*
            * Variables with default values. Default values can be changed
            * while deploying playbook instance.
            */
            variable interface-name-variable {
                value .*;
                description "Enter interface name in regex i.e. ge-.*";
                type string;
            }
            variable threshold {
                value 75.00;
                description "Interface bandwidth percent high threshold value in %.";
                type float;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                releases 17.3R1 {
                                    release-support min-supported-release;
                                    platform EX9200;
                                }
                                releases 18.3R1 {
                                    release-support min-supported-release;
                                    platform EX4650;
                                }
                                releases 18.4R1 {
                                    release-support min-supported-release;
                                    platform EX4600;
                                }
                            }
                            products MX {
                                releases 16.2R1 {
                                    release-support min-supported-release;
                                    platform all;
                                }
                            }
                        }
                    }
                }
            }	    	
        }
    }
}
