/*
 * Monitors interface state, input traffic, output traffic, input errors and output errors and notifies when anomalies are found.
 * Below are the inputs to control detection
 *
 *   1) interface-name-variable, is a regular expression that matches the
 *      interfaces that you would like to monitor.  By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 *
 *   2) out-octets-stats-name, is a regular expression that matches the interface KPI
 *      statistics counter name that you would like to monitor. By default it's
 *      out-octets, Use proper counter name something like 'out-pkts' or
 *      "out-unicast-pkts" or "out-multicast-pkts" etc.
 *
 *   3) out-octets-high-threshold, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 800000000 octets. This rule will set a
 *      dashboard color to red when *all* the output traffic exceed threshold
 *      for 600s. Use 8000000000 octets for 10G & 80000000000 for 100G interface. 
 *
 *   4) out-octets-low-threshold, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 500000000 octets . This rule will set a
 *      dashboard color to yellow when *all* the output traffic exceed 
 *      threshold for 600s, otherwise color is set to green. Use 5000000000
 *      octets for 10G & 50000000000 for 100G interface. 
 *   5) stats-name, is a regular expression that matches the interface KPI
 *      statistics counter name that you would like to monitor. By default it's
 *      in-octets, Use proper counter name something like 'in-pkts' or
 *      "in-unicast-pkts" or "in-multicast-pkts" etc.
 *
 *   6) in-octets-high-threshold, is the threshold that causes the rule to 
 *      report an anomaly.  By default it's 800000000 octets. This rule will 
 *      set a dashboard color to red when *all* the input traffic is above 
 *      threshold for 600 seconds period. Use 8000000000 octets for 10G &
 *      80000000000 for 100G interface.
 *
 *   7) in-octets-low-threshold, is the threshold that causes the rule to
 *      report an anomaly.  By default it's 500000000 octets . This rule will
 *      set a dashboard color to yellow when *all* the input traffic is above
 *      threshold for 600 seconds period, otherwise color is set to green.
 *      Use 5000000000 octets for 10G & 50000000000 for 100G interface. 
 *
 *   8) in-errors-threshold-variable, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 1. This rule will set a dashboard
 *      color to red when *all* the error increases are greater than
 *      'in-errors-threshold-variable' for 600s. If it sees any errors increase for a
 *      period of less than 600s, it'll turn the color to yellow,
 *      otherwise color is set to green.
 *
 *   9) in-errors-stats-name, is the error stats counter name in-error which is
 *      cumaulative of in-fram-errors, in-resource-errors, in-giants, in-drops,
 *      in-discards and mtu-errors. Default value is in-errors.
 *   10) out-errors-threshold-variable, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 1. This rule will set a dashboard
 *      color to red when *all* the error increases are greater than
 *      'out-errors-threshold-variable' for 600s. If it sees any errors increase for a
 *      period of less than 600s, it'll turn the color to yellow,
 *      otherwise color is set to green.
 *   11) flaps-threshold-variable, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 1. This rule will set a dashboard
 *      color to red when *all* the flap-increases are greater than
 *      'flaps-threshold-variable' for 600s. If it sees any flaps increase for a
 *      period of less than 600s, it'll turn the color to yellow,
 *      otherwise color is set to green.
 */
iceberg {
    topic interface.statistics {
        description "Monitors interface statistics i.e. link state, flaps, neighbor state, input & output traffic and errors and notify anomalies";
        synopsis "Interface statistics analyzer";
        rule snmp-check-interface-statistics {	
            synopsis "Tnterface state and stats analyzer";
            description "Collects interface link oper state periodically and notifies when neighbor sate is down and also collects interface stats like in-errors,in-octests,out-errors,out-octets and notifies when these counters crosses threshold values";    
	    	/*
            * Monitors interface input and output traffic. Notifies via the dashboard
            * colors when the traffic is above {{in-octets-high-threshold}} or {{out-octets-high-threshold}} 
            * for every collected metric during a 600s time range (red).
            * The color is set to yellow when the traffic is above {{in-octets-low-threshold}} or 
            * {{out-octets-low-threshold}} for every collected metric during
            * a 600s. Otherwise the color is set to green.
            * 
	    	* Monitors the interface in-errors and out-errors count on an interface.
            * Notifies via the dashboard colors when the flaps increase by {{in-errors-threshold-variable}}
            * {{out-errors-threshold-variable}} for every collected metric during a 600s
            * time range (red).  The color is set to yellow if we see any
            * in errors increase by {{in-errors-threshold-variable}} or {{out-errors-threshold-variable}}. Otherwise the
            * color is set to green.
	    	* 
    		* Monitors the interface link oper state. Notifies via the
            * dashboard colors when the *all* link oper state {{link-state}}
            * is down (red). Otherwise the color is set to green.
            * 
    		/*
            * Use interface name as key for rule.
            */
	    	keys [ index interface-name ];
    		/*
            * Sensor configuration to get data from network devices.
            */	
            sensor interfaces {
                synopsis "Interface snmp sensor definition";
                description "Interfaces snmp sensor to collect data from network device";
                snmp {
                    table IF-MIB::ifTable;
                    frequency 300s;
                }
            }
     		/*
            * Fields defined using sensor path. Map the longer sensor names
            * to the shorter field names used in the rules.
            */
            field admin-state {
                sensor interfaces {
                    path ifAdminStatus;
                }
                type string;
                description "Interface admin status";
            }
	    field flap-count {
                reference {
                    path "/topic[topic-name='interface.statistics']/rule[rule-name=snmp-check-interface-flaps]/field[index='$index']/flaps";
                }
                type integer;
		description "Interface flap count";
            }
	    field flaps-threshold {
                constant {
                    value "{{flaps-threshold-variable}}";
                }
                type integer;
                description "Flap count increase threshold";
            }
            field high-threshold {
                constant {
                    value "{{in-octets-high-threshold}}";
                }
                type integer;
                description "Input traffic high threshold";
            }
            field in-errors-count {
                sensor interfaces {
                    path ifInErrors;
                }
                type integer;
                description "Number of in-errors";  
            }
            field in-errors-threshold {
                constant {
                    value "{{in-errors-threshold-variable}}";
                }
                type integer;
                description "In errors count increase threshold";
            }
            field in-octets-stats-value {
                sensor interfaces {
                    path ifInOctets;
                }
                type integer;
                description "Interface statistics counter (in-octets) value";
            }
	    field index {
                sensor interfaces {
                    path ifIndex;
                }
                type string;
                description "Interface index value";
            }
            field interface-name {
                sensor interfaces {
		    where "ifDescr =~ /{{interface-name-variable}}/"; 
                    path ifDescr;
                }
                type string;
                description "Interfaces to be monitored";
            }
            field link-state {
                sensor interfaces {
                    path ifOperStatus;
                }
                type string;
                description "Interfaces link operator status";
            }
            field low-threshold {                   
                constant {
                    value "{{in-octets-low-threshold}}";
                }
                type integer;
                description "Input traffic low threshold";
            }
            field out-errors-count {
                sensor interfaces {
                    path ifOutErrors;
                }
                type integer;
                description "This field shows interface field's value";
            }
            field out-errors-threshold {
                constant {
                    value "{{out-errors-threshold-variable}}";
                }
                type integer;
                description "Out errors count increase threshold";
            }
            field out-octets-high-threshold {
                constant {
                    value "{{out-octets-high-threshold}}";
                }
                type integer;
                description "Output traffic high threshold";
            }
            field out-octets-low-threshold {
                constant {
                    value "{{out-octets-low-threshold}}";
                }
                type integer;
                description "Output traffic low threshold";
            }
            field out-octets-stats-value {
                sensor interfaces {
                    path ifOutOctets;
                }
                type integer;
                description "Interface statistics counter (out-octets) value";
            }
	    /*
            * Anomaly detection logic for link-flaps.
            */
	    trigger flap-count {
                frequency 1o;
                /*
                * Sets color to red and sends out an anomaly notification when
                * the interface carrier-transition ($flaps-count) count increases for
                * all points in a 60 seconds period.
                */
                term is-link-flapping-consistently {
                    when {
                        increasing-at-least-by-value "$flap-count" {
                            value "$flaps-threshold";
                            time-range 2o;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Flaps are increasing continuously on $interface-name, flap count is:$flaps";
                        }
                    }
                }
				/*
                * Sets color to yellow and sends out an anomaly notification
                * when the increase is at least once.
                */
                term is-link-fluctuating {
                    when {
                        increasing-at-least-by-value "$flap-count" {
                            value "$flaps-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name flaps($flaps) are intermittent";
                        }
                    }                               
                }
				/*
                * Defaults color to green.
                */
                term is-link-stable {
                    then {
                        status {
                            color green;
                            message "Flap count($flap-count) is normal on $interface-name";
                        }
                    }
                }
            } 
            /*
            * Anomaly detection logic to findout in-errors.
            */
            trigger in-errors {
        	synopsis "Interface in-errors kpi";
                description "Sets health based on the change in in-errors count";
                /*
                * Sets color to red and sends out an anomaly notification when
                * interface in errors ($in-errors-count) count increases for 
                * all points in 600 seconds period.
                */
                frequency 1o;
                term is-interface-in-errors-abnormal {
                    when {
                        increasing-at-least-by-value "$in-errors-count" {
                            value "$in-errors-threshold";
                            time-range 2o;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "In errors are increasing continuously on $interface-name, Error count is:$in-errors-count";
                        }
                    }
                }
        		/*
                * Sets color to yellow and sends out an anomaly notification
                * when the increase is at least once.
                */
                term is-interface-in-errors-median {
                    when {
                        increasing-at-least-by-value "$in-errors-count" {
                            value "$in-errors-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name in errors($in-errors-count) are intermittent";
                        }
                    }
                }
        		/*
                * Defaults color to green.
                */
                term no-interface-in-errors {
                    then {
                        status {
                            color green;
                            message "In error count:$in-errors-count is normal on $interface-name";
                        }
                    }
                }
            }
            /*
            * Anomaly detection logic for in-traffic.
            */ 
            trigger in-traffic {
                synopsis "Interface input traffic kpi";
                description "Sets health based on input traffic exceed threshold";
                /*
                * Sets color to red and sends out an anomaly notification
                * when the interface input traffic ($in-octets-stats-value) is
                * abovehigh threshold (in-octets-high-threshold) for all  
                * points in a 600 seconds period.
                */                
                frequency 1o;
                term is-interface-in-traffic-abnormal {
                    when {
                        increasing-at-least-by-value "$in-octets-stats-value" {
                            value "$high-threshold";
                            time-range 2o;
                        }
                    }
                    then {
                        status {                    
                            color red;
                            message "$interface-name input traffic is above high threshold($high-threshold octets)";
                        }
                    }
                }
            	/*
                * Sets color to yellow and sends out an anomaly notification
                * when the interface input traffic($in-octets-stats-value) is
                * above low threshold (in-octets-low-threshold) for all points 
                * in a 600 seconds period.
                */   
                term is-interface-in-traffic-median {
                    when {
                        increasing-at-least-by-value "$in-octets-stats-value" {
                            value "$low-threshold";
                            time-range 2o;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name input traffic is in medium range(>=$low-threshold,<=$high-threshold  octets)";
                        }
                    }
                }
            	/*
                * Defaults color to green.
                */       
                term interface-in-traffic-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name input traffic:$in-octets-stats-value is normal";
                        }
                    }
                }
            }
            /*
            * Anomaly detection logic for link-state.
            */
            trigger link-state {
                synopsis "link state kpi";          
                description "Sets health based on link state";
        		/*
                * Skips evaluation for admin down state interfaces
                */
                frequency 1o;
                term is-link-admin-down {
                    when {
                        matches-with "$admin-state" 2;
                    }
                }
        		/*
                * Sets color to red and sends out anomaly notification when 
                * the interface oper state ($link-state) is down.
                */    
                term is-link-down {
                    when {
                        equal-to "$admin-state" 1;
                        matches-with "$link-state" 2;
                        matches-with "$admin-state" 1;
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name link operator status is DOWN";
                        }
                    }
                }
        		/*
                * Defaults color to green.
                */
                term link-up {
                    then {
                        status {
                            color green;
                            message "$interface-name link operator status is UP";
                        }
                    }
                }
            }
        	/*
            * Anomaly detection logic for out-errors.
            */
            trigger out-errors {                    
     		synopsis "Interface out-errors kpi";
                description "Sets health based on the change in out-errors count";
                /*
                * Sets color to red and sends out an anomaly notification when
                * the interface out errors ($out-errors-count) count increases
                * for all points in 600 seconds period.
                */
                frequency 1o;
                term is-interface-out-errors-abnormal {
                    when {
                        increasing-at-least-by-value "$out-errors-count" {
                            value "$out-errors-threshold";
                            time-range 2o;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Out errors are increasing continuously on $interface-name, Error count is:$out-errors-count";
                        }
                    }
                }
     			/*
                * Sets color to yellow and sends out an anomaly notification
                * when the increase is at least once.
                */
                term is-interface-out-errors-median {
                    when {
                        increasing-at-least-by-value "$out-errors-count" {
                            value "$out-errors-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name out errors ($out-errors-count) are intermittent";
                        }
                    }
                }
     			/*
                * Defaults color to green.
                */
                term no-interface-out-errors {
                    then {                          
                        status {
                            color green;
                            message "Out error count:$out-errors-count is normal on $interface-name";
                        }
                    }
                }
            }
     		/*
            * Anomaly detection logic for out-traffic.
            */
            trigger out-traffic {
     		synopsis "Interface output traffic kpi";
                description "Sets health based on output traffic exceed threshold";
     			/*
                * Sets color to red and sends out an anomaly notification when
                * the interface output traffic ($out-octets-stats-value) is
                * above high threshold (out-octets-high-threshold) for all
                * points in 600 seconds period.
                */         
                frequency 1o;
                term is-interface-stats-abnormal {
                    when {
                        increasing-at-least-by-value "$out-octets-high-threshold" {
                            value "$out-octets-high-threshold";
                            time-range 2o;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name output traffic is above high threshold($high-threshold octets)";
                        }
                    }
                }
                /*
                * Sets color to yellow and sends out an anomaly notification
                * when the interface output traffic ($out-octets-stats-value)
                * is above low threshold (out-octets-low-threshold) for all
                * points in 600 seconds period.
                */       			
     		term is-interface-stats-median {
                    when {
                        increasing-at-least-by-value "$out-octets-stats-value" {
                            value "$out-octets-low-threshold";
                            time-range 2o;
                        }
                    }                               
                    then {
                        status {
                            color yellow;
                            message "$interface-name output traffic is in medium range(>=$low-threshold,<=$high-threshold octets)";
                        }
                    }
                }
     			/*
                * Defaults color to green.
                */ 
                term is-interface-stats-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name output traffic:$out-octets-stats-value is normal";
                        }
                    }
                }
            }
     		/*
            * Variables with default values. Default values can be changed
            * while deploying playbook instance.
            */
            variable flaps-threshold-variable {
                value 1;
                description "Interface flaps threshold: Number of flap increase between metrics, before we report anomaly";
                type int;
            }
	    variable in-errors-stats-name {
                value ifInErrors;
                description "Error stats counter name in-errors which is cumulative of in-frame-errors, in-resource-errors, in-giants, in-drops, in-discards and mtu-erros";
                type string;
            }
            variable in-errors-threshold-variable {
                value 1;
                description "Interface in errors threshold: Number of errors increase between metrics, before we report anomaly";
                type int;
            }
            variable in-octets-high-threshold {
                value 800000000;
                description "Interface input traffic high threshold value in octets. Traffic rate of increase between metrics, before we report anomaly. Default value for 1G interface is 800000000. Modify default value for 10G is 8000000000 and 100G is 80000000000";
                type int;
            }
            variable in-octets-low-threshold {
                value 500000000;
                description "Interface input traffic low threshold value in octets. Traffic rate of increase between metrics, before we report anomaly. Default value for 1G interface is 500000000. Modify default value for 10G is 5000000000 and 100G is 50000000000";
                type int;
            }
            variable interface-name-variable {
                value .*;
                description "Interface names to monitor, regular expression, e.g. 'ge-.*'";
                type string;
            }
            variable out-errors-stats-name-variable {
                value ifOutErrors;
                description "Error stats counter name out-errors which is cumulative of out-resource-errors, out-drops and out-discards";
                type string;
            }
            variable out-errors-threshold-variable {
                value 1;
                description "Interface out errors threshold: Number of errors increase between metrics, before we report anomaly";
                type int;
            }
            variable out-octets-high-threshold {
                value 800000000;
                description "Interface output traffic high threshold value in octets. Traffic rate of increase between metrics, before we report anomaly";
                type int;
            }
            variable out-octets-low-threshold {
                value 500000000;
                description "Interface output traffic low threshold value in octets. Traffic rate of increase between metrics, before we report anomaly";
                type int;
            }
            variable out-octets-stats-name {
                value ifOutOctets;
                description "Interface output traffic counter name";
                type string;
            }
            variable stats-name {
                value ifInOctets;
                description "Interface input traffic counter name";
                type string;
            }
            rule-properties {
                version 2;
                contributor juniper;
                supported-healthbot-version 1.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {           
                                releases 12.3R1 {
                                    release-support min-supported-release;
                                    platform EX9200;
                                }
                                releases 18.3R1 {
                                    release-support min-supported-release;
                                    platform EX4650;
                                }
                                releases 14.1X53 {
                                    release-support min-supported-release;
                                    platform EX4600;
                                }
                            }
                            products MX {
                                releases 14.1R1 {
                                    release-support min-supported-release;
                                    platform [ MX2010 MX2020 MX240 MX480 MX960 ];
                                }
                                releases 17.3R1 {
                                    release-support min-supported-release;
                                    platform MX150;
                                }
                            }
                            products PTX {
                                releases 17.1R1 {
                                    release-support min-supported-release;
                                    platform [ PTX1000 PTX10000 PTX5000 ];
                                }
                            }
                            products QFX {          
                                releases 17.2R1 {
                                    release-support min-supported-release;
                                    platform [ QFX10000 QFX5200 ];
                                }
                                releases 15.1R1 {
                                    release-support min-supported-release;
                                    platform QFX5100;
                                }
                                releases 18.1R1 {
                                    release-support min-supported-release;
                                    platform QFX5120-48Y;
                                }
                            }
                        }
                    }
                }
            }
        }	
    } 
}
