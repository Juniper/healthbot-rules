/*
* Monitors the health of ECMP active path count in control plane and notifies
* when anomalies are found
*
* Four input control detection
*
* 1) next-hop-via, is a regular expression via which the next hop would go.
* By default it's '.*', which matches all the via values.
*
* 2) route-destination, is a regular expression that matches the route
* destination addresses that you would like to count the number of next
* hop. By default it's '.*' which matches all the route destination
* addresses.
*
* 3) route-table-name, is a regular expression that matches the route
* table names that you would like to monitor. By default it's '.*'
* which matches with all the route table names.
*
* 4) threshold, is the active path limit that causes the rule to report an
* anomaly. By default active path limit is set as 2. This rule will set a
* dashboard color to green when next hop count for a route destination
* is greater than the threshold value. The color will be set to yellow when
* next hop count is greater than or equal to 1. Otherwise it is set to
* red.
*/

healthbot {
    topic protocol.routesummary {
        description "Monitors and notify control plane statistics i.e. route count, local link, next hop, PIM group, IGMP group etc";
        synopsis "Control plane statistics analyzer";
        rule check-ecmp-active-paths-netconf {
            keys [ rt-destination table-name via ];
            synopsis "ECMP active path analyzer";
            description "Collects the ECMP active path count periodically and notifies in case of anomalies";
            /*
            * Monitors the health of ECMP active path count in forwarding table
            * Notifies via the dashboard colors when number of next hop is
            * greater than the active path limit {{$threshold}} it sets the
            * color to green. It sets the color to yellow if the number of
            * next hop is greater than or equal to 1. Otherwise the color
            * is set to red.
            *
            * Use rt-destination,table-name and via as keys for rule
            *
            */
            function active-path-count {
                path forwarding_count.py;
                method forwarding_count;
                argument destination {
                    mandatory;
                }
                argument to {
                    mandatory;
                }
            }
            /*
            * Sensor configuration to get data from network devices.
            */
            sensor controlplane-sensor {
                synopsis "Controlplane netconf based iAgent sensor definition";
                description "iAgent sensor defined in yml file using netconf rpc/cli command and defined fields using pyez tables & views to collect data from network device";
                iAgent {
                    file ForwardingTable.yml;
                    table ForwardingTable;
                    frequency 60s;
                }
            }
            /*
            * Fields defined using sensor path. Map the longer sensor names
            * to the shorter field names used in the rules.
            */
            field next-hop-to {
                sensor controlplane-sensor {
                    path next-hop-to;
                }
                type string;
                description "next hop of route destination";
            }
            field rt-destination {
                sensor controlplane-sensor {
                    where "rt-destination =~ /^{{route-destination}}$/";
                    path ../rt-destination;
                }
                type string;
                description "route destination whose number of next hop should be counted"
            }
            field table-name {
                sensor controlplane-sensor {
                    where "table-name =~ /^{{route-table-name}}$/";
                    path ../../table-name;
                }
                type string;
                description "route table name to be monitored";
            }
            field via {
                sensor controlplane-sensor {
                    where "via =~ /^{{next-hop-via}}$/";
                    path via;
                }
                type string;
                description "destination goes via to the next hop";
            }
            /*
            * Field defined with variable and constant value
            */
            field threshold {
                constant {
                    value "{{threshold}}";
                }
                type integer;
                description "Active path count increase threshold";
            }
            /*
            * Anomaly detection logic.
            */
            trigger active-path-count {
                frequency 1.5offset;
                synopsis "Active path count analyzer";
                description "Sets health based on the change in active path count";
                /*
                * Sets color to green and sends out an anomaly notification when
                * active path count ($count) for route destination ($rt-destination)
                * is greater than the active path limit ($threshold).
                */
                term next-hop-count-is-normal {
                    when {
                        greater-than-or-equal-to "$count" "$threshold";
                    }
                    then {
                        status {
                            color green;
                            message "$rt-destination has next hop count ($count) greater than constant active path limit $threshold";
                        }
                    }
                }
                /*
                * Sets color to yellow and sends out an anomaly notification when
                * active path count ($count) for route destination ($rt-destination)
                * is greater than or equal to 1.
                */
                term next-hop-count-is-median {
                    when {
                        greater-than-or-equal-to "$count" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "$rt-destination has next hop count equal to or lesser than the constant active path limit $threshold";
                        }
                    }
                }
                /*
                * Defaults color to red.
                */
                term next-hop-count-is-abnormal {
                    then {
                        status {
                            color red;
                            message "$rt-destination has next hop count ($count) equal to 0";
                        }
                    }
                }
            }
            /*
            * Variables with default values. Default values can be changed
            * while deploying playbook instance.
            */
            variable next-hop-via {
                value .*;
                description "Enter the next hop via for the route destination in regex";
                type string;
            }
            variable route-destination {
                value .*;
                description "Enter the route destination address in regex";
                type string;
            }
            variable route-table-name {
                value .*;
                description "Enter the route table name in regex";
                type string;
            }
            variable threshold {
                value 2;
                description "Active path limit";
                type int;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                platforms All {
                                    releases 15.1R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products EX {
                                platforms All {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                        }
                    }
                }
            }
        }
    }
}
