/*
 * This rule checks if Public IP/Port combinations utilized in a NAT pool is above threshold
 *
 * It flags RED if NAT pool utilization is above threshold (default: 90%)
 * Data can be fetched per nat-pool-name or per service-interface or any combination of both
 *
 * The data can be fetched:
 *  - Based on pool name (parse .* for variable pool-name for all pools)
 *  - Selected pool names (parse | seperated values for subset e.g: p1 | p2)
 *  - For a particular pool (parse exact pool name)
 *  - Based on service interface name (parse vms-.* or ams.* for all vms or ams interfaces)
 *  - Selected service interface names using | seperated values e.g: ams0 | ams1
 *  - Specific service interface name using the name of service interface e.g: ams0
 *
 */
healthbot {
    topic usf.cgnat.pool-usage {
        rule nat-pool-usage {
            keys [ interface-name pool-name ];
            description "Nat Pool Usage Info";
            function get-float-from-percentage-string {
                description "Get percentage value";
                path get-float-from-percentage-string.py;
                method get_float_from_percentage_string;
            }
            sensor NatPoolUsage {
                iAgent {
                    file nat_pool_usage.yml;
                    table NatSourcePoolUtilTable;
                    frequency 60s;
                }
            }
            field addresses-used {
                sensor NatPoolUsage {
                    path resource-usage-total-used;
                }
                type integer;
                description "Total pool addresses used";
            }
            field available-public-ip-port-combinations {
                sensor NatPoolUsage {
                    path resource-usage-total-avail;
                }
                type integer;
                description "Available Public IP/port combinations";
            }
            field interface-name {
                sensor NatPoolUsage {
                    where "interface-name =~ /{{service-interface-name}}/";
                    path interface-name;
                }
                type string;
                description "Service interface name";
            }
            field pool-name {
                sensor NatPoolUsage {
                    where "resource-usage-pool-name =~ /{{pool-name}}/";
                    path resource-usage-pool-name;
                }
                type string;
                description "Name of the pool under check";
            }
            field pool-peak-usage-percentage {
                sensor NatPoolUsage {
                    path resource-usage-peak-usage;
                }
                type string;
                description "Peal peak usage percentage";
            }
            field pool-peak-usage-timestamp {
                sensor NatPoolUsage {
                    path resource-usage-peak-date-time;
                }
                type string;
                description "Pool peak usage timestamp";
            }
            field pool-total-addresses {
                sensor NatPoolUsage {
                    path resource-usage-total-address;
                }
                type integer;
                description "Total addresses in pool";
            }
            field pool-usage-percentage {
                sensor NatPoolUsage {
                    path resource-usage-total-usage;
                }
                type string;
                description "Pool usage percentage";
            }
            field pool-usage-percentage-threshold {
                constant {
                    value "{{pool-usage-percentage-threshold}}";
                }
                type float;
                description "Pool usage percentage threshold";
            }
            field pool-usage-percentage-value {
                formula {
                    eval {
                        expression "($total-public-ip-port-combinations - $available-public-ip-port-combinations) / $$total-public-ip-port-combinations * 100";
                    }
                }
                type float;
                description "Value of pool usage percentage";
            }
            field port-overloading-factor {
                sensor NatPoolUsage {
                    path resource-usage-port-ol-factor;
                }
                type string;
                description "Port overloading factor";
            }
            field total-public-ip-port-combinations {
                sensor NatPoolUsage {
                    path resource-usage-total-total;
                }
                type integer;
                description "Total Public IP/port combinations";
            }
            trigger Pool_Util_trigger {
                term pool_utilisation_high {
                    when {
                        greater-than-or-equal-to "$pool-usage-percentage-value" "$pool-usage-percentage-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "Pool Utilisation is high for $pool-name and $interface-name";
                        }
                    }
                }
                term Default {
                    then {
                        status {
                            color green;
                            message "Pool Utilisation is normal for $pool-name and $interface-name";
                        }
                    }
                }
            }
            variable pool-name {
                value None;
                description "Pool name to be matched";
                type string;
            }
            variable pool-usage-percentage-threshold {
                value 90.0;
                description "Pool usage percentage threshold";
                type float;
            }
            variable service-interface-name {
                value None;
                description "Service Interface Name to be matched";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                releases 21.1R1 {
                                    release-support min-supported-release;
                                    platform All-models-where-SPC3-is-supported;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
