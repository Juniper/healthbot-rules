/* This rule checks if there are any errors whicle allocating pool-ip/port
 *
 * This rule keeps flagging RED if any of the following counters increment above threshold (default: 1)
 * - app-exceed-port-limit-error
 * - app-out-of-port-error
 * - blk-exceed-limit-error
 * - blk-exceed-limit-error
 * - blk-mem-alloc-error
 * - blk-out-of-port-error
 * - det-subscriber-exceed-limit-error
 * Else it keeps flagging GREEN
 *
 * Data to the sensor if fetched based on pool-name or service-set-name or interface-name or any combination of the three
 *
 * Data can be fetched by the sensor as follows:
 *  - Based on pool name (parse .* for variable pool-name for all pools)
 *  - Selected pool names (parse | seperated values for subset e.g: p1 | p2)
 *  - For a particular pool (parse exact pool name)
 *  - Based on service interface name (parse vms-.* or ams.* for all vms or ams interfaces)
 *  - Selected service interface names using | seperated values e.g: ams0 | ams1
 *  - Specific service interface name using the name of service interface e.g: ams0
 *  - Based on service-set-name (parse .* for variable service-set-name) to fetch data for all service-sets
 *  - Data for sub-set of service-sets can be fetched by parsing | seperated values for variable service-set-name e.g: ss1 | ss2
 *  - Data for a specific service-set can be fetched by parsing the name of the service-set e.g: ss1
 *
 */ 
healthbot {
    topic usf.cgnat.source-nat-pool-info {
        rule source-nat-pool-info-common {
            keys [ interface-name pool-name service-set-name ];
            description "Source NAT Pool Info";
            sensor SourceNatPoolInfo {
                iAgent {
                    file source_nat_pool_info.yml;
                    table SourceNatPoolTable;
                    frequency 60s;
                }
            }
            field app-exceed-port-limit-error {
                sensor SourceNatPoolInfo {
                    path app-exceed-port-limit-error;
                }
                type integer;
                description "APP port limit exceeded counter";
            }
            field app-out-of-port-error {
                sensor SourceNatPoolInfo {
                    path app-out-of-port-error;
                }
                type integer;
                description "APP out of port Error";
            }
            field blk-exceed-limit-error {
                sensor SourceNatPoolInfo {
                    path blk-exceed-limit-error;
                    data-if-missing {
                        value 0;
                    }
                }
                type integer;
                description "Block limit exceeded error";
            }
            field blk-mem-alloc-error {
                sensor SourceNatPoolInfo {
                    path blk-mem-alloc-error;
                    data-if-missing {
                        value 0;
                    }
                }
                type integer;
                description "Block memory allocation error";
            }
            field blk-out-of-port-error {
                sensor SourceNatPoolInfo {
                    path blk-out-of-port-error;
                    data-if-missing {
                        value 0;
                    }
                }
                type integer;
                description "Block out of port error";
            }
            field det-subscriber-exceed-limit-error {
                sensor SourceNatPoolInfo {
                    path det-subscriber-exceed-limit-error;
                }
                type integer;
            }
            field interface-name {
                sensor SourceNatPoolInfo {
                    where "interface-name =~ /{{service-interface-name}}/";
                    path interface-name;
                }
                type string;
                description "Interface Name";
            }
            field out-of-addr-error {
                sensor SourceNatPoolInfo {
                    path out-of-addr-error;
                }
                type integer;
                description "Out of address error";
            }
            field out-of-blk-error {
                sensor SourceNatPoolInfo {
                    path out-of-blk-error;
                    data-if-missing {
                        value 0;
                    }
                }
                type integer;
                description "Out of block errors";
            }
            field out-of-port-error {
                sensor SourceNatPoolInfo {
                    path out-of-port-error;
                }
                type integer;
                description "Out of port error";
            }
            field parity-port-error {
                sensor SourceNatPoolInfo {
                    path parity-port-error;
                }
                type integer;
                description "Parity Port Error";
            }
            field pool-name {
                sensor SourceNatPoolInfo {
                    where "pool-name =~ /{{pool-name}}/";
                    path pool-name;
                }
                type string;
                description "NAT pool name";
            }
            field preserve-range-error {
                sensor SourceNatPoolInfo {
                    path preserve-range-error;
                }
                type integer;
                description "Preserve Range Error";
            }
            field service-set-name {
                sensor SourceNatPoolInfo {
                    path service-set-name;
                }
                type string;
                description "Service set name";
            }
            field source-pool-port-blk-efficiency {
                sensor SourceNatPoolInfo {
                    path source-pool-port-blk-efficiency;
                }
                type string;
                description "Source pool port block efficiency";
            }
            trigger Pool_info_triggers {
                frequency 70s;
                term Out_of_port_error_term {
                    when {
                        increasing-at-least-by-value "$out-of-port-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observed out of port error";
                        }
                    }
                }
                term Out_of_addr_error_term {
                    when {
                        increasing-at-least-by-value "$out-of-addr-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing out of address errors";
                        }
                    }
                }
                term Parity_port_errors {
                    when {
                        increasing-at-least-by-value "$parity-port-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing parity port errors";
                        }
                    }
                }
                term Preserve_range_error {
                    when {
                        increasing-at-least-by-value "$preserve-range-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing preserve range errors";
                        }
                    }
                }
                term APP_out_of_port_error {
                    when {
                        increasing-at-least-by-value "$app-out-of-port-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing APP out go port error";
                        }
                    }
                }
                term APP_port_limit_exceed {
                    when {
                        increasing-at-least-by-value "$app-exceed-port-limit-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "APP port limit exceeded error seen";
                        }
                    }
                }
                term Bloc_limit_Exceeded_error {
                    when {
                        increasing-at-least-by-value "$blk-exceed-limit-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Block limit exceeded errors seen";
                        }
                    }
                }
                term out_of_block_errors {
                    when {
                        increasing-at-least-by-value "$out-of-blk-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Out of block errors seen";
                        }
                    }
                }
                term Block_out_of_port_error {
                    when {
                        increasing-at-least-by-value "$blk-out-of-port-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Block out of port error seen";
                        }
                    }
                }
                term block_mem_alloc_error {
                    when {
                        increasing-at-least-by-value "$blk-mem-alloc-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Block memory alloc error seen";
                        }
                    }
                }
                term source-pool-port-blk-efficiency {
                    when {
                        greater-than-or-equal-to "$source-pool-port-blk-efficiency" 90.0;
                    }
                    then {
                        status {
                            color red;
                            message "Port block efficiency for $pool-name exceeds threshold";
                        }
                    }
                }
                term det-subscriber-exceed-limit-error {
                    when {
                        increasing-at-least-by-value "$det-subscriber-exceed-limit-error" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing det-subscriber-exceed-limit-error for $pool-name";
                        }
                    }
                }
                term default {
                    then {
                        status {
                            color green;
                            message "NAT source pool for $pool-name not observing any errors";
                        }
                    }
                }
            }
            variable pool-name {
                value None;
                description "Name of the pool to be matched";
                type string;
            }
            variable service-interface-name {
                value None;
                description "Service Interface Name to be matched";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                releases 21.1R1 {
                                    release-support min-supported-release;
                                    platform All-models-where-SPC3-is-supported;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
