/*
 * This rule flags anamolies whenever service-set drops packets
 *
 * It flags RED when one of these counters increments over the threshold (default:1) in a period of time
 *  - cpulimit-drops
 *  - flowlimit-drops
 *  - memlimit-drops
 * Else it keeps flagging GREEN
 *
 * The data can be fetched to sensor:
 *  - Based on service-set-name (parse .* for variable service-set-name) to fetch data for all service-sets
 *  - Data for sub-set of service-sets can be fetched by parsing | seperated values for variable service-set-name e.g: ss1 | ss2
 *  - Data for a specific service-set can be fetched by parsing the name of the service-set e.g: ss1
 *  - Based on service interface name (parse vms-.* or ams.* for all vms or ams interfaces)
 *  - Selected service interface names using | seperated values e.g: ams0 | ams1
 *  - Specific service interface name using the name of service interface e.g: ams0
 *
 */
healthbot {
    topic usf.service-set-packet-drops {
        rule service-set-packet-drops {
            keys service-set-name;
            description "Packet Drops on sevice-set";
            sensor service-set-packet-drops {
                iAgent {
                    file service_set_packet_drops.yml;
                    table ServiceSetPacketDropsTable;
                    frequency 60s;
                }
            }
            field cpulimit-drops {
                sensor service-set-packet-drops {
                    path cpulimit-drops;
                }
                type integer;
                description "CPU Limit Drops";
            }
            field flowlimit-drops {
                sensor service-set-packet-drops {
                    path flowlimit-drops;
                }
                type integer;
                description "Flow Limit Drops";
            }
            field memlimit-drops {
                sensor service-set-packet-drops {
                    path memlimit-drops;
                }
                type integer;
                description "Memory Limit Drops";
            }
            field service-interface {
                sensor service-set-packet-drops {
                    path interface-name;
                }
                type string;
                description "Name of the service interfacve";
            }
            field service-set-name {
                sensor service-set-packet-drops {
                    where "service-set-name =~ /{{sset-name}}/";
                    path service-set-name;
                }
                type string;
                description "Name of the service-set";
            }
            trigger Service-set-packet-drops-trigger {
                frequency 70s;
                term cpulimit_drops {
                    when {
                        increasing-at-least-by-value "$cpulimit-drops";
                    }
                    then {
                        status {
                            color red;
                            message "Observing CPU limit drops for service-set $service-set-name";
                        }
                    }
                }
                term memorylimit_drops {
                    when {
                        increasing-at-least-by-value "$memlimit-drops" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing Memory limit drops for service-set $service-set-name";
                        }
                    }
                }
                term flowlimit_drops {
                    when {
                        increasing-at-least-by-value "$flowlimit-drops" {
                            value 1;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Observing Flow limit drops for service-set $service-set-name";
                        }
                    }
                }
                term Default {
                    then {
                        status {
                            color green;
                            message "No drops observed for service-set $service-set-name";
                        }
                    }
                }
            }
            variable sset-name {
                value .*;
                description "Name of the service set for which packet drops needs to be checked";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.1.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                releases 21.1R1 {
                                    release-support min-supported-release;
                                    platform All-models-where-SPC3-is-supported;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
