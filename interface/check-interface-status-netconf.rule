/*
 * Monitors interface state and notifies when anomalies are found.
 * One input control detection
 *
 * 1) interface-name, is a regular expression that matches the
 * interfaces that you would like to monitor. By default it’s ‘.*’,
 * which matches all interfaces. Use something like ‘ge.*’ to
 * match only gigabit ethernet interfaces.
 */
healthbot {
    topic interface {
        description "Monitors and notify interface statistics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-interface-status-netconf {
            keys name;
            /*
             * Router provides the interface name which needs to
             * be monitored.
             */
            synopsis "Interface state analyzer";
            description "Collects interface link oper state periodically and notifies when neighbor sate is down";
            /*
             * Monitors the interface link over state periodically. Notifies via the
             * dashboard colors when the interface status is up then the color is
             * set to green. Otherwise the color is set to red when the interface
             * status is down.
             *
             * Use name as key for rule
             *
             * Sensor configuration to get data from network devices.
             */
            sensor interface {
                synopsis "Interfaces netconf based iAgent sensor definition";
                description "iAgent sensor defined in yml file using netconf rpc/cli command and defined fields using pyez tables & views to collect data from network device";
                iAgent {
                    file IntStatsTable.yml;
                    table IntStatsTable;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field admin-status {
                sensor interface {
                    path admin-status;
                }
                type string;
                description "Admin status";
            }
            field name {
                sensor interface {
                    where "admin-status =~ /up/";
                    where "name =~ /{{interface-name}}/";
                    path name;
                }
                type string;
                description "Interfaces to be monitored";
            }
            field oper-status {
                sensor interface {
                    where "admin-status =~ /up/";
                    path oper-status;
                }
                type string;
                description "Interfaces status";
            }
            /*
             * Anomaly detection logic.
             */
            trigger interface-status {
                synopsis "Interface status";
                description "Sets health based on interface status";
                frequency 1.5offset;
                /*
                 * Sets color to green and sends out an anomaly notification
                 * when the interface oper status ($oper-status) matches with
                 * up.
                 */
                term interface-up {
                    when {
                        matches-with "$oper-status" up;
                    }
                    then {
                        status {
                            color green;
                            message "$name status is $oper-status";
                        }
                    }
                }
                /*
                 * Defaults color to red.
                 */
                term is-interface-down {
                    then {
                        status {
                            color red;
                            message "$name status is $oper-status";
                        }
                    }
                }
            }
            /*
             * Variable with default value set to ‘.*’ which
             * matches all interfaces.
             */
            variable interface-name {
                value "ge-.*|xe-.*|mge-.*|et-.*";
                description "Enter interface name in regex i.e. ge-.*";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                category comprehensive;
                is-scaling-rule {
                    description "Fields:name ; Directly impacted by number of interfaces in each network device";
                }				
                supported-healthbot-version 3.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                platforms All {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products MX {
                                platforms All {
                                    releases 15.1R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                        }
                        operating-system junosEvolved {
                            products ACX {
                                platforms All {
                                    releases 22.3R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                        }						
                    }
                }
                helper-files other {
                    list-of-files IntStatsTable.yml;
                }				
            }
        }
    }
}