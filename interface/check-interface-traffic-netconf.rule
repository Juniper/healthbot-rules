/*
 * Detects Interface input and output traffic and notifies when
 * anomalies are found.
 * Two input control detection
 *
 * 1) interface-name, is a regular expression that matches the
 * interfaces that you would like to monitor. By default it’s ‘.*’,
 * which matches all interfaces. Use something like ‘ge.*’ to
 * match only gigabit ethernet interfaces.
 *
 * 2) threshold, is the threshold that causes the rule to report
 * an anomaly. By default it is 8000000000 bps. This rule will
 * set a dashboard color to red when io traffic exceeds the
 * high threshold value. If dynamic threshold of io traffic is equal
 * to 1, the color is set to yellow. Otherwise it is set to green.
 */
healthbot {
    topic interface {
        description "Monitors and notify interface statistics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-interface-traffic-netconf {
            keys name;
            synopsis "Interface input and output traffic analyzer";
            description "Collects the interface input and output traffic.";
            /*
             * Monitors interface input and output traffic. Notifies via the
             * dashboard colors when interface io traffic exceeds the high
             * threshold {{$threshold}} it sets the color to red. The color is
             * set to yellow if dynamic threshold {{$dt-in-bps}} or {{$dt-out-bps}}
             * of io traffic is equal to 1. Otherwise the color is set to green.
             *
             * Use name as key for rule
             */
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor interface {
                synopsis "Interfaces netconf based iAgent sensor definition";
                description "iAgent sensor defined in yml file using netconf rpc/cli command and defined fields using pyez tables & views to collect data from network device";
                iAgent {
                    file IntStatsTable.yml;
                    table IntStatsTable;
                    frequency 60s;
                }
            }
            /*
             * Field defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field admin-status {
                sensor interface {
                    path admin-status;
                }
                type string;
                description "Admin Status of Interfaces to be monitored";
            }
            /*
             * Fields defined using formulae by user-defined function
             */
            field dt-in-bps {
                formula {
                    anomaly-detection {
                        algorithm 3sigma;
                        learning-period 7d;
                        pattern-periodicity 1h;
                        field-name "$input-bps";
                    }
                }
                type integer;
                description "Interface input bps dynamic threshold";
            }
            field dt-out-bps {
                formula {
                    anomaly-detection {
                        algorithm 3sigma;
                        learning-period 7d;
                        pattern-periodicity 1h;
                        field-name "$output-bps";
                    }
                }
                type integer;
                description "Interface output bps dynamic threshold";
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field input-bps {
                sensor interface {
                    path input-bps;
                }
                type integer;
                description "Interface input bps";
            }
            field input-bytes {
                sensor interface {
                    path input-bytes;
                }
                type integer;
                description "Interface input bytes";
            }
            field input-pps {
                sensor interface {
                    path input-pps;
                }
                type integer;
                description "Interface input pps";
            }
            field name {
                sensor interface {
                    where "admin-status =~ /up/";
                    where "name =~ /{{interface-name}}/";
                    path name;
                }
                type string;
                description "Interfaces to be monitored";
            }
            field output-bps {
                sensor interface {
                    path output-bps;
                }
                type integer;
                description "Interface output bps";
            }
            field output-bytes {
                sensor interface {
                    path output-bytes;
                }
                type integer;
                description "Interface output bytes";
            }
            field output-pps {
                sensor interface {
                    path output-pps;
                }
                type integer;
                description "Interface output pps";
            }
            /*
             * Field defined with variable and constant value
             */
            field threshold {
                constant {
                    value "{{threshold}}";
                }
                type integer;
                description "Interface traffic increase threshold";
            }
            /*
             * Anomaly detection logic.
             */
            trigger in-traffic-bps {
                synopsis "Interface input traffic";
                description "Sets health based on the change in input traffic";
                frequency 1.5offset;
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the input traffic ($input-bps) is greater than the threshold
                 * ($threshold).
                 */
                term is-input-traffic-abnormal {
                    when {
                        greater-than-or-equal-to "$input-bps" "$threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$name input traffic($input-bps bps) crossed static threshold value ($threshold bps)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification when
                 * the dynamic threshold ($dt-in-bps) of input traffic is equal to 1.
                 */
                term is-input-traffic-above-dt {
                    when {
                        equal-to "$dt-in-bps" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "$name input traffic($input-bps bps) is above dynamic threshold";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term is-input-traffic-normal {
                    then {
                        status {
                            color green;
                            message "$name input traffic($input-bps bps) is normal";
                        }
                    }
                }
            }
            trigger out-traffic-bps {
                synopsis "Interface output traffic ";
                description "Sets health based on the change in output traffic";
                frequency 1.5offset;
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the output traffic ($output-bps) is greater than the threshold
                 * ($threshold).
                 */
                term is-output-traffic-abnormal {
                    when {
                        greater-than-or-equal-to "$output-bps" "$threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$name output traffic($output-bps bps) crossed static threshold value ($threshold bps)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification when
                 * the dynamic threshold ($dt-out-bps) of output traffic is equal to 1.
                 */
                term is-output-traffic-above-dt {
                    when {
                        equal-to "$dt-out-bps" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "$name output traffic($output-bps bps) is above dynamic threshold";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term is-output-traffic-normal {
                    then {
                        status {
                            color green;
                            message "$name output traffic($output-bps bps) is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable interface-name {
                value "ge-.*|xe-.*|mge-.*|et-.*";
                description "Enter interface name in regex i.e. ge-.*";
                type string;
            }
            variable threshold {
                value 8000000000;
                description "Interface traffic high threshold value in bps.";
                type int;
            }
            rule-properties {
                version 1;
                contributor juniper;
                category comprehensive;
                is-scaling-rule {
                    description "Fields:name ; Directly impacted by number of interfaces in each network device";
                }				
                supported-healthbot-version 3.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                platforms All {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products MX {
                                platforms All {
                                    releases 15.1R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                        }
                        operating-system junosEvolved {
                            products ACX {
                                platforms All {
                                    releases 22.3R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                        }						
                    }
                }
                helper-files other {
                    list-of-files IntStatsTable.yml;
                }				
            }
        }
    }
}