/*
 * This rule checks pem status and power usage and notify in case any of the health monitored fields crosses threshold
 */
iceberg {
    topic chassis.power {
        description "This topic monitors PEM, zones and overall system power usage";
        synopsis "Chassis power management kpis";
        rule check-pem-power-usage {
            /*
             * unique identifier of the rule is pem slot number
             */
            keys pem-slot;
            synopsis "Chassis PEM power manager";
            description "This rule collects chassis PEM power usage statistics periodically and notifies in case of anomalies";
            /*
             * This function required to get remaining power as router provides only used
             */
             function used-percentage {
                description "calculates % of power usage out of total available";
                path used-percentage.py;
                method used_percentage;
                argument total {
                    mandatory;
                }
                argument used {
                    mandatory;
                }
            }
            /*
             * sensor configuration to get data from network devices
             */
            sensor components {
                synopsis "chassis components sensor definition";
                description "/components open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /components/;
                    frequency 10s;
                }
            }
            /*
             * Fields defined using sensor path
             */
            field fru-model-number {
                sensor components {
                    where "/components/component/properties/property/@name == 'fru-model-number'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "stores fru model number";
            }
            field pem-slot {
                sensor components {
                    where "/components/component/@name =~/^PEM[0-9]$/";
                    path "/components/component/@name";
                }
                type string;
                description "stores all available PEM slots";
            }
            field pem-state {
                sensor components {
                    where "/components/component/properties/property/@name == 'state'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "stores state of PEMs";
            }
            field power-capacity-maximum {
                sensor components {
                    where "/components/component/properties/property/@name == 'power-capacity-maximum'";
                    path /components/component/properties/property/state/value;
                }
                type integer;
                description "stores max power capacity for PEMs";
            }
            field power-dc-input {
                sensor components {
                    where "/components/component/properties/property/@name == 'power-dc-input'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "stores power input state of PEMs";
            }
            field power-dc-output {
                sensor components {
                    where "/components/component/properties/property/@name == 'power-dc-output'";
                    path /components/component/properties/property/state/value;
                }
                type integer;
                description "stores power being used by PEMs";
            }
            field temperature-status {
                sensor components {
                    where "/components/component/properties/property/@name == 'temperature-status'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "stores temperature status of PEMs";
            }
            /*
             * Fields defined using formulae by user-defined function
             */
            field pem-power-usage {
                formula {
                    user-defined-function {
                        function-name used-percentage;
                        argument total "$power-capacity-maximum";
                        argument used "$power-dc-output";
                    }
                }
                type integer;
                description "stores % of power usage by PEMs using udf";
            }
            /*
             * Fields defined with variables and constant values
             */
            field pem-power-usage-threshold {
                constant {
                    value "{{pem_power_usage_threshold}}";
                }
                type integer;
                description "Set pem power usage threshold";
            }
            /*
             * When power usage is beyond threshold then sends anomaly and sets color to red otherwise sets to green.
             */
            trigger pem-power-usage {
                synopsis "chassis PEM power usage kpi";
                description "Sets health based on PEM power usage.";
                term is-power-usage-crossing-threshold {
                    when {
                        greater-than "$pem-power-usage" "$pem-power-usage-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$pem-slot power usage($pem-power-usage) is crossing threshold";
                        }
                    }
                }
                term power-usage-normal {
                    then {
                        status {
                            color green;
                            message "$pem-slot power usage($pem-power-usage) is normal";
                        }
                    }
                }
            }
            /*
             * When pem state is offline then sends anomaly and sets color to red otherwise sets to green.
             */
            trigger pem-state {
                synopsis "chassis PEM state kpi";
                description "Sets health based on PEM state.";
                term is-pem-online {
                    when {
                        matches-with "$pem-state" Online;
                    }
                    then {
                        status {
                            color green;
                            message "$pem-slot is $pem-state";
                        }
                    }
                }
                term pem-offline {
                    then {
                        status {
                            color red;
                            message "$pem-slot is $pem-state";
                        }
                    }
                }
            }
            /*
             * When pem temperatue is not ok then send anomaly and sets color to red otherwise sets to green.
             */
            trigger pem-temperature-status {
                synopsis "chassis PEM temperature kpi";
                description "Sets health based on PEM temperature threshold.";
                term is-temperature-status-ok {
                    when {
                        matches-with "$temperature-status" OK;
                    }
                    then {
                        status {
                            color green;
                            message "$pem-slot temperature status is $temperature-status";
                        }
                    }
                }
                term temperature-status-not-ok {
                    then {
                        status {
                            color red;
                            message "$pem-slot temperature status is $temperature-status";
                        }
                    }
                }
            }
            /*
             * When power dc input not ok then send anomaly and sets color to red otherwise sets to green.
             */
            trigger power-dc-input {
                synopsis "chassis power DC input state kpi";
                description "Sets health based on power DC input state.";
                term is-power-dc-input-ok {
                    when {
                        matches-with "$power-dc-input" OK;
                    }
                    then {
                        status {
                            color green;
                            message "$pem-slot power-dc-input is $power-dc-input";
                        }
                    }
                }
                term is-power-dc-input-not-ok {
                    then {
                        status {
                            color red;
                            message "$pem-slot power-dc-input is $power-dc-input";
                        }
                    }
                }
            }
            /*
             * Variables with default values which can be altered while deploying playbook instance
             */
            variable pem_power_usage_threshold {
                value 888888880;
                description "Enter PEM power usage threshold value";
                type int;
            }
        }
    }
}
