/*
 * Detects PEMs (Power Entry Modules) power usage threshold breaches and
 * notifies when anomalies are found.
 *
 * Detects PEMs state changes and notifies when anomalies are found.
 *
 * Detects PEMs temperature changes and notifies when anomalies are found.
 *
 * Detects PEMs AC or DC input state changes and notifies when anomalies are found.
 *
 * One input control detection
 *
 *   1) "pem-power-usage-threshold" is the threshold that causes the rule to
 *      report an anomaly. By default it's 80% of PEM power usage. This rule
 *      will set a dashboard color to red when PEM power usage exceed
 *      threshold 'pem-power-usage-threshold'. Otherwise color is set to green.
 *   2) "power-input-type" is selects the input type as power-dc-input or
 *      power-ac-input
 */
healthbot {
    topic chassis.power {
        description "Monitors the chassis power usage of whole system, zone & PEMs and notifies anomalies";
        synopsis "Chassis power manager";
        rule check-pem-power-usage {
            synopsis "PEM power check";
            description "Collects PEM power usage periodically and notifies anomaly when power usage exceed threshold";
            /*
             * Monitors PEM power usage. Notifies via the dashboard colors when
             * the PEM power usage exceed by {{pem-power-usage-threshold}} to
             * red. Otherwise the color is set to green.
             *
             * Monitors PEMs state. Notifies via the dashboard colors when the
             * PEM state is "OK" to green. Otherwise the color is set to green.
             *
             * Monitors PEMs temperature state. Notifies via the dashboard
             * colors when the temperature state is "OK" to green. Otherwise
             * the color is set to green.
             *
             * Monitors PEMs AC or DC power input state. Notifies via the dashboard
             * colors when the AC or DC input state is "OK" to green. Otherwise the
             * color is set to green.
             *
             * Use PEM slot as key for rule.
             */
            keys pem-slot;
            /*
             * Router provides power values in number hence function derives
             * used percent.
             */
             function used-percentage {
                description "Calculates % of power usage out of total available";
                path used-percentage.py;
                method used_percentage;
                argument total {
                    mandatory;
                }
                argument used {
                    mandatory;
                }
            }
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor components {
                synopsis "Chassis components sensor definition";
                description "/components open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /components/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field pem-slot {
                sensor components {
                    where "/components/component/@name =~/^PEM[0-9]$/";
                    path "/components/component/@name";
                }
                type string;
                description "PEM slot to monitor";
            }
            field pem-state {
                sensor components {
                    where "/components/component/properties/property/@name == 'state'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "PEM current state";
            }
            field power-capacity-maximum {
                sensor components {
                    where "/components/component/properties/property/@name == 'power-capacity-maximum'";
                    path /components/component/properties/property/state/value;
                    zero-suppression;
                }
                type integer;
                description "PEM maximum power capacity";
            }
            field power-input {
                sensor components {
                    where "/components/component/properties/property/@name == {{power-input-type}}";
                    path /components/component/properties/property/state/value;
                    zero-suppression;
                }
                type string;
                description "PEM AC or DC input";
            }
            field power-dc-output {
                sensor components {
                    where "/components/component/properties/property/@name == 'power-dc-output'";
                    path /components/component/properties/property/state/value;
                    zero-suppression;
                }
                type integer;
                description "PEM DC output";
            }
            field temperature-status {
                sensor components {
                    where "/components/component/properties/property/@name == 'temperature-status'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "PEM temperature";
            }
            /*
             * Fields defined using formulae by user-defined function
             */
            field pem-power-usage {
                formula {
                    user-defined-function {
                        function-name used-percentage;
                        argument total "$power-capacity-maximum";
                        argument used "$power-dc-output";
                    }
                }
                type integer;
                description "Stores % of power usage by PEMs using UDF";
            }
            /*
             * Fields defined with variables and constant values
             */
            field pem-power-usage-threshold {
                constant {
                    value "{{pem-power-usage-threshold}}";
                }
                type integer;
                description "PEM power usage threshold";
            }
            /*
             * PEM power usage anomaly detection logic.
             */
            trigger pem-power-usage {
                synopsis "PEM power usage KPI";
                description "Sets health based increase in PEM power usage";
                frequency 1offset;
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the PEM power usage ($pem-power-usage) exceed threshold
                 * ($pem-power-usage-threshold).
                 */
                term is-power-usage-crossing-threshold {
                    when {
                        greater-than "$pem-power-usage" "$pem-power-usage-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$pem-slot power usage($pem-power-usage) exceed threshold";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term power-usage-normal {
                    then {
                        status {
                            color green;
                            message "$pem-slot power usage($pem-power-usage) is normal";
                        }
                    }
                }
            }
            /*
             * PEM state anomaly detection logic.
             */
            trigger pem-state {
                synopsis "PEM state check KPI";
                description "Sets health based on PEM state";
                frequency 1offset;
                /*
                 * Sets color to green when PEM state ($pem-state) is "online".
                 */
                term is-pem-online {
                    when {
                        matches-with "$pem-state" Online;
                    }
                    then {
                        status {
                            color green;
                            message "$pem-slot is $pem-state";
                        }
                    }
                }
                /*
                 * Defaults color to red and notify anomaly.
                 */
                term pem-offline {
                    then {
                        status {
                            color red;
                            message "$pem-slot is $pem-state";
                        }
                    }
                }
            }
            /*
             * PEM temperature anomaly detection logic.
             */
            trigger pem-temperature-status {
                synopsis "PEM temperature KPI";
                description "Sets health based on PEM temperature state";
                frequency 1offset;
                /*
                 * Sets color to green when PEM temperature
                 * ($temperature-status) is "OK".
                 */
                term is-temperature-status-ok {
                    when {
                        matches-with "$temperature-status" OK;
                    }
                    then {
                        status {
                            color green;
                            message "$pem-slot temperature status is $temperature-status";
                        }
                    }
                }
                /*
                 * Defaults color to red and notify anomaly.
                 */
                term temperature-status-not-ok {
                    then {
                        status {
                            color red;
                            message "$pem-slot temperature status is $temperature-status";
                        }
                    }
                }
            }
            /*
             * PEM power DC input anomaly detection logic.
             */
            trigger power-input {
                synopsis "PEM power AC or DC input state KPI";
                description "Sets health based on power AC or DC input state";
                frequency 1offset;
                /*
                 * Sets color to green when PEM AC or DC input ($power-input)
                 * if "OK".
                 */
                term is-power-input-ok {
                    when {
                        matches-with "$power-input" OK;
                    }
                    then {
                        status {
                            color green;
                            message "$pem-slot power-input is $power-input";
                        }
                    }
                }
                /*
                 * Defaults color to red and notify anomaly.
                 */
                term is-power-input-not-ok {
                    then {
                        status {
                            color red;
                            message "$pem-slot power-input is $power-input";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable pem-power-usage-threshold {
                value 80;
                description "PEM power usage threshold percentage";
                type int;
            }
            variable power-input-type {
    			value power-dc-input;
    			description "PEM power input type";
    			type string;
			}
            rule-properties {
                version 2;
                contributor juniper;
                category advanced;
                supported-healthbot-version 1.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                platforms MX240 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX480 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX960 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX2010 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX2020 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX150 {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                            }
                            products PTX {
                                platforms PTX5000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms PTX1000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms PTX10000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                            }
                            products QFX {
                                platforms QFX10000 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms QFX5200 {
                                    releases 17.2R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms QFX5100 {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms QFX5120-48Y {
                                    releases 18.3R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                            }
                            products EX {
                                platforms EX9200 {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                                platforms EX4650 {
                                    releases 18.3R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                                platforms EX4600 {
                                    releases 18.4R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                            }
                        }
                    }
                }
            }
        }
    }
}
