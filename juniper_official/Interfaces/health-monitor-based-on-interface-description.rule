/*
 * Filters interfaces based on keyword of an interface description. Monitors
 * only filtered interfaces based on selective KPI.
 * Using this playbook any one of the interface KPI (in-octets, out-octets,
 * in-pkts, out-pkts, in-unicast-pkts, out-unicast-pkts, in-errors, out-errors,
 * carrier-transitions) will be monitored.
 *
 * ****Separate playbook instances to be created for each interface kpi****
 * By default it monitors input traffic and notifies when utilization is above
 * threshold
 * Four inputs control detection
 *
 *   1) interface_description, is a regular expression that matches the keyword
 *      in interface description and filters interfaces that you would like to
 *      monitor. By default it's '.+', which matches all interfaces contains
 *      description. Use something like 'core' to match only interfaces which
 *      contains keyword 'core' in interface description.
 *
 *   2) stats_name, is a regular expression that matches the interface KPI
 *      statistics counter name that you would like to monitor. By default it's
 *      in-octets, Use proper counter name something like 'out-octets' or
 *      "in-errors" or "out-errors" etc.
 *
 *   3) high_threshold, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 800000000 octets . This rule will set a
 *      dashboard color to red when *filtered interfaces* the input traffic
 *      is above threshold for 60s. Use 8000000000 octets for 10G & 80000000000
 *      for 100G interface.
 *
 *   4) medium_threshold, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 500000000 octets . This rule will set a
 *      dashboard color to yellow when *filtered interfaces* the input traffic
 *      is above threshold for 60s, otherwise color is set to green. Use
 *      5000000000 octets for 10G & 50000000000 for 100G interface. 
 */ 
iceberg {
    topic interface.monitor {
        description "Monitors only filtered interfaces based on keyword in description";
        synopsis "Selective interface KPIs monitoring";
        rule check-interface-health {
            synopsis "Interface KPI monitor based on description";
            description "Using this rule any one of the interface statistics counter (in and out errors, packets, octets, flaps) will be monitored";
            /*
             * Monitors the interface input traffic. Notifies via the dashboard
             * colors when the traffic is above {{high_threshold}} for every
             * collected metric during a 60s time range (red).  The color is
             * set to yellow when the traffic is above {{medium_threshold}} for
             * every collected metric during a 60s. Otherwise the color is set
             * to green.
             * 
             * Use interface name as key for rule.
             */
            keys interface-name;
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor interfaces {
                synopsis "Interface open-config sensor definition";
                description "Interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/;
                    frequency 20s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field description {
                sensor interfaces {
                    path /interfaces/interface/state/description;
                }
                type string;
                description "This field is for interface description";
            }
            field interface-name {
                sensor interfaces {
                    path "/interfaces/interface/@name";
                }
                type string;
                description "This field is interface name";
            }
            field stats-value {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/{{stats_name}}";
                }
                type integer;
                description "Interface statistics counter (in-octets) value";
            }
            /*
             * Fields defined with variables and constant values
             */
            field medium-threshold {
                constant {
                    value "{{medium_threshold}}";
                }
                type integer;
                description "In error count high threshold";
            }
            field high-threshold {
                constant {
                    value "{{high_threshold}}";
                }
                type integer;
                description "In error count high threshold";
            }
            field stats-name {
                constant {
                    value "{{stats_name}}";
                }
                type string;
                description "Interface statistics counter name";
            }
            field user-description {
                constant {
                    value "{{interface_description}}";
                }
                type string;
                description "Keyword in interface description";
            }
            /*
             * Anomaly detection logic.
             */
            trigger interface-stats {
                synopsis "interface statistics kpi";
                description "Sets health based on interface statistics exceed threshold";
                /*
                 * Skips evaluation for the interfaces where keyword unmatched 
                 * in interface description.
                 */
                term is-interface-description-not-matching {
                    when {
                        does-not-match-with "$description" "$user-description";
                    }
                }
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the interface input traffic ($stats-value) is above high
                 * threshold ($high-threshold) for all points in a 60 seconds
                 * period.
                 */
                term is-interface-stats-crossing-high-threshold {
                    when {
                        min-rate-of-increase "$stats-value" {
                            rate "$high-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$stats-name of $interface-name($description) is:$stats-value and above high threshold($high-threshold)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the interface input traffic ($stats-value) exceed
                 * threshold ($medium-threshold) for all points in 60 seconds
                 * period.
                 */
                term is-interface-stats-crossing-medium-threshold {
                    when {
                        min-rate-of-increase "$stats-value" {
                            rate "$medium-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$stats-name of $interface-name($description) is:$stats-value and in medium range($medium-threshold)";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term interface-stats-normal {
                    then {
                        status {
                            color green;
                            message "$stats-name of $interface-name($description) is:$stats-value is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable high_threshold {
                value 800000000;
                description "Interface in traffic high threshold value in octets. Traffic rate of increase between metrics, before we report anomaly";
                type int;
            }
            variable interface_description {
                value ".+";
                description "Filter interfaces which contains keyword in its description, regular expression, e.g. 'core|edge|access|bng'";
                type string;
            }
            variable medium_threshold {
                value 500000000;
                description "Interface in traffic medium threshold value in octets. Traffic rate of increase between metrics, before we report anomaly";
                type int;
            }
            variable stats_name {
                value "in-octets";
                description "Interface statistics counter name(in-octets, out-octets, in-pkts, out-pkts, in-unicast-pkts, out-unicast-pkts, in-errors, out-errors, carrier-transitions) to monitor. Create separate instance for each kpi";
                type string;
            }
        }
    }
}
