/*
 * Monitors interface output traffic and notifies when anomalies are found.
 * Four inputs control detection
 *
 *   1) interface_name, is a regular expression that matches the
 *      interfaces that you would like to monitor.  By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 *
 *   2) stats_name, is a regular expression that matches the interface KPI
 *      statistics counter name that you would like to monitor. By default it's
 *      out-octets, Use proper counter name something like 'out-pkts' or
 *      "out-unicast-pkts" or "out-multicast-pkts" etc.
 *
 *   3) out_octets_high_threshold, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 800000000 octets. This rule will set a
 *      dashboard color to red when *all* the output traffic exceed threshold
 *      for 60s. Use 8000000000 octets for 10G & 80000000000 for 100G interface. 
 *
 *   4) out_octets_low_threshold, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 500000000 octets . This rule will set a
 *      dashboard color to yellow when *all* the output traffic exceed 
 *      threshold for 60s, otherwise color is set to green. Use 5000000000
 *      octets for 10G & 50000000000 for 100G interface. 
 */
iceberg {
    topic interface.statistics {
        description "Monitors and notify interface statistics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-out-traffic {
            synopsis "interface output traffic analyzer";
            description "Collects output traffic(out-octets) periodically and notifies in case of traffic is above threshold";
            /*
             * Monitors interface output traffic. Notifies via the dashboard
             * colors when the traffic is above {{out_octets_high_threshold}}
             * for every collected metric during a 60s time range (red).
             * The color is set to yellow when the traffic is above
             * {{out_octets_low_threshold}} for every collected metric during
             * a 60s. Otherwise the color is set to green.
             * 
             * Use interface name as key for rule.
             */
            keys interface-name;
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor interfaces {
                synopsis "interface open-config sensor definition";
                description "/interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/;
                    frequency 20s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{interface_name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "Interfaces to be monitored";
            }
            field out-octets-stats-value {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/{{outoctets_stats_name}}";
                }
                type integer;
                description "Interface statistics counter (out-octets) value";
            }
            /*
             * Fields defined with variables and constant values
             */
            field high-threshold {
                constant {
                    value "{{out_octets_high_threshold}}";
                }
                type integer;
                description "Output traffic high threshold";
            }
            field low-threshold {
                constant {
                    value "{{out_octets_low_threshold}}";
                }
                type integer;
                description "Output traffic low threshold";
            }
            /*
             * Anomaly detection logic.
             */
            trigger out-traffic {
                synopsis "Interface output traffic kpi";
                description "Sets health based on output traffic exceed threshold";
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the interface output traffic ($out-octets-stats-value) is
                 * above high threshold (out_octets_high_threshold) for all
                 * points in 60 seconds period.
                 */           
		frequency 20s;
                term is-interface-stats-abnormal {
                    when {
                        min-rate-of-increase "$out-octets-stats-value" {
                            rate "$high-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name output traffic is above high threshold($high-threshold octets)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the interface output traffic ($out-octets-stats-value)
                 * is above low threshold (out_octets_low_threshold) for all
                 * points in 60 seconds period.
                 */                   
                term is-interface-stats-median {
                    when {
                        min-rate-of-increase "$out-octets-stats-value" {
                            rate "$low-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name output traffic is in medium range(>=$low-threshold,<=$high-threshold octets)";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */                 
                term is-interface-stats-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name output traffic:$out-octets-stats-value is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable interface_name {
                value ".*";
                description "Interfaces to be monitored";
                type string;
            }
            variable out_octets_high_threshold {
                value 800000000;
                description "Interface output traffic high threshold value in octets. Traffic rate of increase between metrics, before we report anomaly";
                type int;
            }
            variable out_octets_low_threshold {
                value 500000000;
                description "Interface output traffic low threshold value in octets. Traffic rate of increase between metrics, before we report anomaly";
                type int;
            }
            variable outoctets_stats_name {
                value out-octets;
                description "Interface output traffic counter name";
                type string;
            }
        }
    }
}
