/*
 * Checks if cpu usage is exceeding threshold value and raises alarm.
 * 
 * Two input control detection.
 * 
 *   1) "threshold" is used to check if the used percentage is
 *      increasing by more than the threshold value.
 *   2) "freq" is the interval between data points.
 *  
 */
healthbot {
    topic node.exporter {
        rule check-cpu-usage {
            /*
             * Monitors cpu usage fields and notifies through alarms if
             * anomalies are found.
             *
             * Use cpu and mode as key for rule.			 
             */			
            keys [ cpu mode ];
            synopsis "CPU Usage KPI";
            description "Checks CPU total seconds";
            function difference {
                description "Method that calculates the difference between current and previous readings ";
                path generic_functions.py;
                method value_diff;
                argument key_name {
                    mandatory;
                }
                argument sub_key_name {
                    mandatory;
                }
                argument value {
                    mandatory;
                }
            }
            function used-percentage {
                description "Method to calculate the percentage";
                path used-percentage.py;
                method used_percentage;
                argument total {
                    mandatory;
                }
                argument used {
                    mandatory;
                }
            }
            sensor node-cpu {
                /*
                 * Sensor configuration to get data from network devices.
                 */			
                description "node cpu in seconds";
                server-monitoring {
                    sensor-name /node/cpu;
                    frequency 60s;
                }
            }
            /*
             * Fields defined by specifying the sensor paths
             */			
            field cpu {
                sensor node-cpu {
                    path cpu;
                }
                type string;
                description "cpu number";
            }
            field cpu-total-seconds {
                sensor node-cpu {
                    path /node/cpu/seconds/total;
                    zero-suppression;
                }
                type integer;
                description "total cpu seconds";
            }
            field cpu-used-percentage {
                formula {
                    user-defined-function {
                        function-name used-percentage;
                        argument total "$diff-prev-curr";
                        argument used "$frequency";
                    }
                }
                type float;
                description "CPU used percentage for a specific CPU number and mode";
            }
            field diff-prev-curr {
                formula {
                    user-defined-function {
                        function-name difference;
                        argument key_name "$cpu";
                        argument sub_key_name "$mode";
                        argument value "$cpu-total-seconds";
                    }
                }
                type integer;
                description "Difference in current and previous cpu total seconds value";
            }
            field frequency {
                constant {
                    value "{{freq}}";
                }
                type integer;
                description "time interval to calculate cpu used percentage";
            }
            field mode {
                sensor node-cpu {
                    path mode;
                }
                type string;
                description "Different modes like iowait,idle,nice,system etc";
            }
            field threshold {
                constant {
                    value "{{threshold}}";
                }
                type integer;
                description "threshold value to compare cpu used percentage";
            }
            /*
             * Anomaly detection logic.
             */			
            trigger cpu-usage {
                frequency 1offset;
                term above-threshold {
                    when {
                        greater-than-or-equal-to "$cpu-used-percentage" "$threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "The cpu usage $cpu-used-percentage for cpu$cpu  mode$mode exceeds threshold.";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "The cpu usage $cpu-used-percentage for cpu$cpu  mode$mode is normal";
                        }
                    }
                }
            }
            /*
             * Values can be changed while deploying playbook instance. 
             *  
             */			
            variable freq {
                value 60;
                description "time interval to calculate cpu used percentage";
                type int;
            }
            variable threshold {
                value 70;
                description "threshold value";
                type int;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 4.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                platforms All {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                            products MX {
                                platforms All {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                            products PTX {
                                platforms All {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                            products QFX {
                                platforms All {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                            products SRX {
                                platforms All {
                                    releases 18.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }							
                        }
                    }
                }
            }			
        }
    }
}	