/*
 * Checks if network usage fields are exceeding threshold value and raises alarm. 
 * 
 * One input control detection.
 * 
 *   1) "threshold" is used to check if the used percentage is
 *      increasinng by more than the threshold value.
 *  
 */
healthbot {
    topic node.exporter {
        rule check-network-usage {
            /*
             * Monitors network usage and notifies anomalies.
             *
             * Use network-device as key for rule.
             */			
            keys network-device;
            description "";
            function difference {
                path generic_functions.py;
                method value_diff;
                argument key_name {
                    mandatory;
                }
                argument value;
            }
            function used-percent {
                path used-percentage.py;
                method used_percentage;
                argument total;
                argument used;
            }
            sensor check-network {
                /*
                 * Sensor configuration to get data from network devices.
                 */			
                description "node cpu in seconds";
                server-monitoring {
                    sensor-name /node/network/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined by specifying the sensor paths
             */			
            field diff-receive-errors {
                formula {
                    user-defined-function {
                        function-name difference;
                        argument key_name "$network-device";
                        argument value "$receive-errors-total";
                    }
                }
                type integer;
            }
            field diff-receive-multicast-total {
                formula {
                    user-defined-function {
                        function-name difference;
                        argument key_name "$network-device";
                        argument value "$receive-multicast-total";
                    }
                }
                type integer;
            }
            field diff-transmit-errors {
                formula {
                    user-defined-function {
                        function-name difference;
                        argument key_name "$network-device";
                        argument value "$transmit-errors-total";
                    }
                }
                type integer;
            }
            field diff-transmit-packets {
                formula {
                    user-defined-function {
                        function-name difference;
                        argument key_name "$network-device";
                        argument value "$transmit-packets-total";
                    }
                }
                type integer;
            }
            field frequency {
                constant {
                    value 60;
                }
                type integer;
            }
            field network-device {
                sensor check-network {
                    path device;
                }
                type string;
                description "";
            }
            field receive-error-used-percentage {
                formula {
                    user-defined-function {
                        function-name used-percent;
                        argument total "$frequency";
                        argument used "$diff-receive-errors";
                    }
                }
                type float;
            }
            field receive-errors-total {
                sensor check-network {
                    path /node/network/receive/errs/total;
                }
                type integer;
            }
            field receive-multicast-total {
                sensor check-network {
                    path /node/network/receive/multicast/total;
                }
                type integer;
            }
            field receive-multicast-used-percentage {
                formula {
                    user-defined-function {
                        function-name used-percent;
                        argument total "$frequency";
                        argument used "$diff-receive-multicast-total";
                    }
                }
                type float;
            }
            field threshold {
                constant {
                    value "{{threshold}}";
                }
                type integer;
            }
            field transmit-errors-total {
                sensor check-network {
                    path /node/network/transmit/errs/total;
                }
                type integer;
            }
            field transmit-errors-used-percent {
                formula {
                    user-defined-function {
                        function-name used-percent;
                        argument total "$frequency";
                        argument used "$diff-transmit-errors";
                    }
                }
                type float;
            }
            field transmit-packet-used-percent {
                formula {
                    user-defined-function {
                        function-name used-percent;
                        argument total "$frequency";
                        argument used "$diff-transmit-packets";
                    }
                }
                type float;
            }
            field transmit-packets-total {
                sensor check-network {
                    path /node/network/transmit/packets/total;
                }
                type integer;
            }
            /*
             * Anomaly detection logic.
             */			
            trigger receive-error-used-percentage {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$receive-error-used-percentage" "$threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "receive-error-used-percentage $receive-error-used-percentage exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "receive-error-used-percentage $receive-error-used-percentage is normal";
                        }
                    }
                }
            }
            trigger receive-multicast-used-percentage {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$receive-multicast-used-percentage" "$threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "receive-multicast-used-percentage $receive-multicast-used-percentage exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "receive-multicast-used-percentage $receive-multicast-used-percentage is normal";
                        }
                    }
                }
            }
            trigger transmit-errors-used-percent {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$transmit-errors-used-percent" "$threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "transmit-errors-used-percent $transmit-errors-used-percent exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "transmit-errors-used-percent $transmit-errors-used-percent is normal";
                        }
                    }
                }
            }
            trigger transmit-packet-used-percent {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$transmit-packet-used-percent" "$threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "transmit-packet-used-percent $transmit-packet-used-percent exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "transmit-packet-used-percent $transmit-packet-used-percent is normal";
                        }
                    }
                }
            }
            variable threshold {
                value 60;
                type int;
            }
        }
    }
}	
	
