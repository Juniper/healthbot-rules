/*
 * Detects BGP neighbor advertised route count threshold breaches and notifies
 * when anomalies are found.
 * Four inputs control detection
 * 
 *   1) "neighbors" is a regular expression that matches the BGP neighbors
 *      that you would like to monitor.  By default it's '.*', which matches
 *      all BGP neighbors. Use something like '172.16.*' to match all neighbor
 *      addresses which are in 172.16.0.0/16 network range.
 *
 *   2) "routing-instance" is the variable that filters the routing instances.
 *      By default it's ".*", which matches neighbors in all routing instances.
 *      Use something like "master" to match neighbors belongs to only master
 *      routing instance.
 *
 *   3) "addr-table" is the variable that filters the routing address table.
 *      By default it's ".+", which matches all address tables. Use something 
 *      like "IPV4_UNICAST" to match only advertised routes belongs to IPV4
 *      unicast address table.
 *
 *   4) "max-advertised-route-count-threshold" is the threshold that causes the
 *      rule to report an anomaly. By default it's 10000. This rule will set
 *      a dashboard color to red when advertised route count exceed threshold
 *      (max-advertised-route-count-threshold), otherwise color is set to green.
 */
iceberg {
    topic protocol.bgp {
        description "Monitors BGP sessions statistics i.e. neighbor state, detects flaps, route damping and max advertised-routes count and notify anomalies";
        synopsis "BGP session statistics analyzer";
        rule check-bgp-advertised-routes {
            description "Collects BGP session advertised routes count periodically and notifies anomaly when advertised route count exceed threshold";
            synopsis "BGP advertised routes analyzer";
            /*
             * Monitors the BGP advertised routes on neighbor session. Notifies
             * via the dashboard colors when the advertised routes
             * ($advertised-routes) count exceed threshold
             * (advertised-route-count-threshold) and the color is set to red.
             * Otherwise then color is set to green.
             * 
             * Use neighbor-address and address-table as keys for rule.
             */
            keys [address-table neighbor-address];
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor bgp-sensor {
                synopsis "BGP open-config sensor definition";
                description "/protocol/bgp open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /network-instances/network-instance/protocols/protocol/bgp/neighbors;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field instance-name {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/@instance-name =~ /{{routing-instance}}/";
                    path "/network-instances/network-instance/@instance-name";
                }
                type string;
                description "Routing instance to find neighbor's parent instance";
            }
            field neighbor-address {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/@neighbor-address =~ /{{neighbors}}/";
                    path "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/@neighbor-address";
                }
                type string;
                description "BGP neighbor addresses to monitor";
            }
            field address-table {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/@afi-safi-name =~ /{{addr-table}}/";
                    path "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/@afi-safi-name";
                }
                type string;
                description "Address-table to find table specific prefixes";
            }
            field advertised-routes {
                sensor bgp-sensor {
                    path /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent;
                }
                type integer;
                description "Number of advertised routes";
            }
            /*
             * Fields defined with variables and constant values
             */
            field advertised-route-count-threshold {
                constant {
                    value "{{max-advertised-route-count-threshold}}";
                }
                type integer;
                description "Advertised routes count increase threshold";
            }
            /*
             * Fields defined with formulas and dynamic thresholds
             */
            field advertised-routes-dynamic-threshold {
                formula {
                    dynamic-threshold {
                        algorithm k-means;
                        learning-period 7d;
                        pattern-periodicity 1h;
                        field-name "$advertised-routes";
                    }
                }
                type integer;
                description "Dynamically sets threshold using kmeans algorithm";
            }
            /*
             * Anomaly detection logic.
             */
            trigger advertised-routes {
                synopsis "BGP max advertised routes KPI";
                description "Sets health based on increase in advertised routes on neighbor session";
                frequency 60s;
                /*
                 * Sets color to red when advertised routes count
                 * ($advertised-routes) exceed threshold
                 * ($advertised-route-count-threshold) and notify anomaly.
                 */
                term above-static-threshold {
                    when {
                        greater-than-or-equal-to "$advertised-routes" $advertised-route-count-threshold;
                    }
                    then {
                        status {
                            color red;
                            message "Advertised route count($advertised-routes) exceed static threshold";
                        }
                    }
                }
                /*
                 * Sets color to yellow when advertised routes count
                 * ($advertised-routes) exceed dynamic threshold
                 * ($advertised-routes-dynamic-threshold) and notify anomaly.
                 */
                term above-dynamic-threshold {
                    when {
                        equal-to "$advertised-routes-dynamic-threshold" 1 {
                            time-range 5m;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "Advertised route count($advertised-routes) exceed dynamic threshold";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */ 
                term route-count-normal {
                    then {
                        status {
                            color green;
                            message "Advertised route count($advertised-routes) is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable routing-instance {
                value .*;
                type string;
                description "Routing instance specific neighbors, regular expression, e.g. 'master'";
            }
            variable neighbors {
                value .*;
                description "BGP neighbor addresses to monitor, regular expression, e.g. '172.16.*'";
                type string;
            }
            variable addr-table {
                value .+;
                type string;
                description "Address table specific routes, regular expression, e.g. 'IPV4_UNICAST'";
            }
            variable max-advertised-route-count-threshold {
                value 10000;
                type int;
                description "BGP neighbor session advertised routes threshold: Number of advertised route count increase between metrics, before we report anomaly";
            }
        }
    }
}