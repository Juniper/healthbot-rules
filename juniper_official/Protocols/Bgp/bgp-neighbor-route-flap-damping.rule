/*
 * Detects BGP neighbor route flap damping and notifies when anomalies are
 * found.
 * One input control detection
 * 
 *   1) "neighbors" is a regular expression that matches the BGP neighbors
 *      that you would like to monitor.  By default it's '.*', which matches
 *      all BGP neighbors. Use something like '172.16.*' to match all neighbor
 *      addresses which are in 172.16.0.0/16 network range.
 */
iceberg {
    topic protocol.bgp {
        description "Monitors BGP sessions statistics i.e. neighbor state, detects flaps, route damping and max received-routes count and notify anomalies";
        synopsis "BGP session statistics analyzer";
        rule check-bgp-route-flap-damping {
            description "Collects BGP session route flap damping state periodically and notify anomaly when damping state is true";
            synopsis "BGP neighbor route flap damping detector";
            /*
             * Monitors the BGP route flap damping. Notifies via the dashboard
             * colors when the route flap damping state is 'true'. Otherwise
             * the color is set to green
             * 
             * Use neighbor address as key for rule.
             */
            keys neighbor-address;
            /*
             * Sensor configuration to get data from network devices
             */
            sensor bgp-sensor {
                synopsis "BGP open-config sensor definition";
                description "/protocol/bgp open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /network-instances/network-instance/protocols/protocol/bgp/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field neighbor-address {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/@neighbor-address =~ /{{neighbors}}/";
                    path "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/@neighbor-address";
                }
                type string;
                description "BGP neighbor addresses to monitor";
            }
            field route-flap-damping {
                sensor bgp-sensor {
                    path /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/route-flap-damping;
                }
                type string;
                description "Route flap damping on session";
            }
            /*
             * Anomaly detection logic.
             */
            trigger neigbor-route-flap-damping {
                synopsis "BGP route flap damping KPI";
                description "Sets health based on change in route flap damping state change.";
                frequency 60s;
                /*
                 * Sets color to red when BGP neighbor route flap damping state
                 * is not 'true'.
                 */
                 term is-neighbor-route-flap-damping {
                    when {
                        does-not-match-with "$route-flap-damping" false;
                    }
                    then {
                        status {
                            color red;
                            message "Route flap damping detected on $neighbor-address";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term no-route-flap-damping {
                    then {
                        status {
                            color green;
                            message "Route flap damping not applied";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable neighbors {
                value .*;
                description "BGP neighbor addresses to monitor, regular expression, e.g. '172.16.*'";
                type string;
            }
        }
    }
}
