/*
 * Detects LLDP (session) state changes and notifies when anomalies are found.
 * One input control detection
 * 
 *   1) interface_name, is a regular expression that matches the
 *      interfaces that you would like to monitor.  By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 */
iceberg {
    topic protocol.lldp {
        description "Monitors lldp statitics i.e. neighbor state, frame discards, frame errors, tlv discards & unknown tlvs and notify anomalies";
        synopsis "LLDP session statistics analyzer";
        rule check-lldp-session {
            description "Collects lldp session state periodically and notify anomaly when state is down";
            synopsis "LLDP session state analyzer";
            /*
             * Monitors the LLDP session state. Notifies via the dashboard
             * colors when the session state is false and color is set to red.
             * Otherwise the color is set to green.
             * 
             * Use interface name as key for rule.
             */
            keys interface-name;
            /*
             * Sensor configuration to get data from network devices
             */
            sensor lldp-sensor {
                synopsis "LLDP open-config sensor definition";
                description "/lldp open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /lldp/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field if-lldp-state {
                sensor lldp-sensor {
                    path /lldp/interfaces/interface/state/enabled;
                }
                type string;
                description "Local interface LLDP state";
            }
            field interface-name {
                sensor lldp-sensor {
                    where "/lldp/interfaces/interface/@name =~ /{{interface_name}}/";
                    path "/lldp/interfaces/interface/@name";
                }
                type string;
                description "Interfaces to be monitored";
            }
            field neighbor-state {
                sensor lldp-sensor {
                    path /lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled;
                }
                type string;
                description "Remote LLDP neighbor state";
            }
            /*
             * Anomaly detection logic.
             */
            trigger lldp-session-state {
                synopsis "LLDP state KPI";
                description "Sets health based on lldp session state changes and notify anomaly.";
                frequency 60s;
                /*
                 * Sets color to green when LLDP neighbor state is true.
                 */
                term is-lldp-disabled {
                    when {
                        does-not-match-with "$if-lldp-state" true;
                    }
                }
                term is-lldp-session-up {
                    when {
                        matches-with "$neighbor-state" true;
                    }
                    then {
                        status {
                            color green;
                            message "Interface $interface-name llpd session is up";
                        }
                    }
                }
                /*
                 * Defaults color to red and notify anomaly.
                 */
                term lldp-session-down {
                    then {
                        status {
                            color red;
                            message "Interface-$interface-name llpd session down";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable interface_name {
                value ".*";
                type string;
                description "Interface names to monitor, regular expression, eg 'ge-.*'";
           }
        }
    }
}
