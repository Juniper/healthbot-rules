/*
 * Dynamically sets the route count threshold for each protocol of each route
 * table and notify anomaly when route count is aberrant.
 */
iceberg {
    topic protocol.routesummary {
        description "Monitors each routing table and each protocol route count and sets dynamic thresholds and notify anomaly when route count is abnormal";
        synopsis "RIB route tables and protocols statistics analyzer";
        rule check-protocol-route-count {
            synopsis "Protocols routes statistics analyzer";
            description "Collects total-route-count of each protocol and sets dynamic thresholds and notify anomaly when route count is abnormal";
            /*
             * Monitors Protocols routes of all the route tables. Sets dynamic
             * threshold using k-means machine learning alogorithm based on
             * learned data. Notifies via dashboard colors when the route
             * count of each protocol exceed or drop for every collected metric
             * during a 35 minute time range (red). Otherwise the color is set
             * to green.
             * 
             * Use protocol-name and table-name name as keys for rule.
             */
            keys [ protocol-name table-name ];
            /*
             * Sensor configuration to get data from network devices
             */
            sensor route-protocol-summary {
                synopsis "Get routing table protocol statistics using iAgent sensor";
                description "Get routing table statistics through -show route summary- command and filters protocols in each routing table";
                iAgent {
                    file route-protocol-summary.yml;
                    table RouteProtocolsTable;
                    frequency 15m;
                }
            }
            /*
             * Fields defined with dynamic threshold ML algorithms
             */
            field route-count-dynamic-threshold {
                formula {
                    dynamic-threshold {
                        algorithm k-means;
                        learning-period 30d;
                        pattern-periodicity 1h;
                        field-name "$protocol-route-count";
                    }
                }
                type string;
                description "Detects anamoly dynamically using kmeans algorithm";
            }
            /*
             * Anomaly detection logic.
             */
            trigger protocol-routes-count {
                synopsis "Protocol route count check KPI";
                description "Sets health based on increase or drop in route count of each protocol";
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the route count of each protocol exceed or drop
                 * ($route-count-dynamic-threshold result contains ^anomaly$)
                 * for all points in a 35 minutes period.
                 */
                 term is-protocol-route-count-abnormal {
                   when {
                        matches-with "$route-count-dynamic-threshold" "^anomaly$" {
                            time-range 35m;
                            }
                        }
                    then {
                        status {
                            color red;
                            message "Anomaly detected: $table-name:$protocol-name route count($protocol-route-count) is abnormal";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */ 
                term protocol-route-count-normal {
                    then {
                        status {
                            color green;
                            message "$table-name:$protocol-name route count($protocol-route-count) is normal";
                        }
                    }
                }
            }
        }
    }
}
