/*
 * Checks if disk read usage fields exceed threshold value and raises red alarm if 
 * usage is more than threshold for 3 offsets else dashboard color is set to green.
 * Three input control detection.
 * 
 *   1) "threshold" is used to check if the used percentage is
 *      increasing by more than the threshold value.
 *   2) "threshold-increase" is used to check if the difference of current and previous
 *      values is increasing by more than the threshold-increase value.
 *   3) "freq" is the interval between data points.
 *  
 *  
 */
healthbot {
    topic server.monitoring {
        rule check-disk-read-usage {
            /*
             * Monitors disk read usage fields and notifies through alarms if
             * anomalies are found.
             *
             * Use disk-name as key for rule.			 
             */		
            keys disk-name;
            synopsis "Disk read usage KPI";			
            description "Collects disk read information and notifies anomaly in case bytes-total,completed-total and time-seconds-total used percentage values are above threshold for 3 offsets";
            sensor node-disk-read {
                /*
                 * Sensor configuration to get data from network devices.
                 */			
                description "node disk in seconds";
                server-monitoring {
                    sensor-name /node/disk;
                    frequency 120s;
                }
            }
            /*
             * Fields defined by specifying the sensor paths
             */			
            field bytes-total {
                sensor node-disk-read {
                    path /node/disk/read/bytes/total;
                    zero-suppression;
                }
                type integer;
                description "total Disk bytes";
            }
            field completed-total {
                sensor node-disk-read {
                    path /node/disk/reads/completed/total;
                    zero-suppression;
                }
                type integer;
                description "total Disk reads completed";
            }
            field completed-used-percentage {
                formula {
                    eval {
                        expression "( $diff-completed / $frequency ) * 100";
                    }
                }
                type float;
                description "Percentage of disk read completed";				
            }			
            field diff-bytes {
                formula {
                    value-difference {
                        field-name "$bytes-total";
                    }
                }
                type integer;
                description "Difference of previous and current values";				
            }			
            field diff-completed {
                formula {
                    value-difference {
                        field-name "$completed-total";
                    }
                }
                type integer;
                description "Difference of previous and current values";				
            }			
            field diff-time-seconds {
                formula {
                    value-difference {
                        field-name "$time-seconds-total";
                    }
                }
                type integer;
                description "Difference of previous and current values";				
            }			
            field disk-name {
                sensor node-disk-read {
                    path device;
                }
                type string;
                description "disk name";
            }
            field frequency {
                constant {
                    value "{{freq}}";
                }
                type integer;
                description "interval between 2 datapoints";
            }
            field threshold {
                constant {
                    value "{{threshold}}";
                }
                type integer;
                description "threshold percentage to be compared with";
            }
            field threshold-increase {
                constant {
                    value "{{threshold-increase}}";
                }
                type integer;
                description "threshold value increase to be compared with";
            }
            field time-seconds-total {
                sensor node-disk-read {
                    path /node/disk/read/time/seconds/total;
                    zero-suppression;
                }
                type integer;
                description "total Disk read time";
            }
            field time-seconds-used-percentage {
                formula {
                    eval {
                        expression "( $diff-time-seconds / $frequency ) * 100";
                    }
                }
                type float;
                description "Percentage of disk read time-seconds";				
            }			
            /*
             * Anomaly detection logic.
             */			
            trigger bytes-total-increase {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$diff-bytes" "$threshold-increase" {
                            time-range 3offset;
                            all;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "bytes-total-increase $diff-bytes for $disk-name exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "bytes-total-increase $diff-bytes for $disk-name  is normal";
                        }
                    }
                }
            }
            trigger completed-used-percentage {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$completed-used-percentage" "$threshold" {
                            time-range 3offset;
                            all;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "completed-used-percentage \"$completed-used-percentage\" for $disk-name exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "completed-used-percentage \"$completed-used-percentage\" for $disk-name is normal";
                        }
                    }
                }
            }
            trigger time-seconds-used-percentage {
                frequency 1offset;
                term exceeds-threshold {
                    when {
                        greater-than-or-equal-to "$time-seconds-used-percentage" "$threshold" {
                            time-range 3offset;
                            all;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "time-seconds-used-percentage \"$time-seconds-used-percentage\" for $disk-name exceeds threshold";
                        }
                    }
                }
                term normal {
                    then {
                        status {
                            color green;
                            message "time-seconds-used-percentage \"$time-seconds-used-percentage\" for $disk-name is normal";
                        }
                    }
                }
            }
            /*
             * Values can be changed while deploying playbook instance. 
             *  
             */			
            variable freq {
                value 60;
                description "time interval to calculate used percentage";
                type int;
            }
            variable threshold {
                value 70;
                description "threshold percentage value ";
                type int;
            }
            variable threshold-increase {
                value 1000;
                description "threshold value";
                type int;
            }
            rule-properties {
                supported-devices {
                    other-vendor linux {
                        vendor-name ubuntu;
                        operating-system ubuntu;
                    }
                }
            }			
        }
    }
}	
