/*
* Monitors interface auto negotiation status and notifies when
* anomalies are found.
* One input control detection
*
* 1) interface-name, is a regular expression that matches the
* interfaces that you would like to monitor. By default it’s ‘.*’,
* which matches all interfaces. Use something like ‘ge.*’ to
* match only gigabit ethernet interfaces.
*/
healthbot {
    topic interface.statistics {
        description "Monitors and notify interface statistics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-interface-auto-negotiation-netconf {
            keys name;
            synopsis "Interface auto negotiation status analyzer";
            description "Collects interface auto negotiation state periodically and notifies when status is incomplete ";
            /*
             * Monitors interface auto negotiation state. Notifies via the
             * dashboard colors when interface auto negotiation state
             * ($autonegotiation-status) matches with complete state then
             * it is set to green. Otherwise it is set to red.
             * The rule will set dashboard color to red when interface auto
             * negotiation state ($autonegotiation-status) matches
             * with incomplete state in case of duplex-mismatch and by
             * default sets the color to green. The rule will set dashboard color
             * to green when interface auto negotiation state ($autonegotiation-status)
             * matches with incomplete state in case of speed-mismatch and
             * by default sets the color to red.
             *
             * Use name as key for rule
             *
             * Sensor configuration to get data from network devices.
             */
            sensor interface {
                synopsis "Interfaces netconf based iAgent sensor definition";
                description "iAgent sensor defined in yml file using netconf rpc/cli command and defined fields using pyez tables & views to collect data from network device";
                iAgent {
                    file IntStatsTable.yml;
                    table IntStatsTable;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field admin-status {
                sensor interface {
                    path admin-status;
                }
                type string;
                description "Admin status";
            }
            field autonegotiation-status {
                sensor interface {
                    path autonegotiation-status;
                }
                type string;
                description "Auto negotiation status";
            }
            field link-partner-duplexity {
                sensor interface {
                    path link-partner-duplexity;
                }
                type string;
                description "Line partner duplexity";
            }
            field link-partner-speed {
                sensor interface {
                    path link-partner-speed;
                }
                type string;
                description "Line partner speed";
            }
            field link-partner-status {
                sensor interface {
                    path link-partner-status;
                }
                type string;
                description "Line partner status";
            }
            field local-link-duplexity {
                sensor interface {
                    path local-link-duplexity;
                }
                type string;
                description "Link duplexity";
            }
            field local-link-speed {
                sensor interface {
                    path local-link-speed;
                }
                type string;
                description "Local link speed";
            }
            field name {
                sensor interface {
                    where "admin-status =~ /up/";
                    where "name =~ /{{interface-name}}/";
                    path name;
                }
                type string;
                description "Interfaces to be monitored";
            }
            /*
             * Anomaly detection logic.
             */
            trigger auto-negotiation-status {
                synopsis "Interface Auto negotiation status";
                description "Sets health based on interface auto negotiation status";
                frequency 1.5offset;
                /*
                 * Sets color to green and sends out an anomaly notification when
                 * the Interface Auto negotiation status ($autonegotiation-status)
                 * matches with complete.
                 */
                term auto-negotiation-complete {
                    when {
                        matches-with "$autonegotiation-status" "^complete" {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color green;
                            message "$name auto-negotiation status is $autonegotiation-status";
                        }
                    }
                }
                /*
                 * Defaults color to red.
                 */
                term auto-negotiation-not-complete {
                    when {
                        matches-with "$autonegotiation-status" incomplete {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$name auto-negotiation status is not complete";
                        }
                    }
                }
            }
            trigger duplex-mismatch {
                synopsis "Duplex mismatch";
                description "Sets health based on duplex mismatch between link-partner and local-link";
                frequency 1.5offset;
                term auto-negotiation-not-complete {
                    when {
                        matches-with "$autonegotiation-status" incomplete;
                    }
                }
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the duplexity of link-partner ($link-partner-duplexity) doesn’t
                 * match with the duplexity of local-link ($local-link-duplexity).
                 */
                term duplex-mismatch {
                    when {
                        does-not-match-with "$link-partner-duplexity" "$local-link-duplexity";
                    }
                    then {
                        status {
                            color red;
                            message "$name duplex doesn't match with link partner duplex";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term duplex-matches {
                    then {
                        status {
                            color green;
                            message "$name duplex matches with link partner duplex.";
                        }
                    }
                }
            }
            trigger speed-mismatch {
                synopsis "Speed mismatch";
                description "Sets health based on speed mismatch between link-partner and local-link";
                frequency 1offset;
                term auto-negotiation-not-complete {
                    when {
                        matches-with "$autonegotiation-status" incomplete;
                    }
                }
                term speed-mismatch {
                    when {
                        does-not-match-with "$link-partner-speed" "$local-link-speed";
                    }
                    then {
                        status {
                            color red;
                            message "$name speed does not match with link partner.";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term speed-match {
                    then {
                        status {
                            color green;
                            message "$name speed matches with link partner speed.";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable interface-name {
                value "ge-.*|xe-.*|mge-.*|et-.*";
                description "Enter interface name in regex i.e. ge-.*";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                category basic;
                is-scaling-rule {
                    description "Fields:name ; Directly impacted by number of interfaces in each network device";
                }				
                supported-healthbot-version 3.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                platforms All {
                                    releases 17.3R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products MX {
                                platforms All {
                                    releases 15.1R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                        }
                    }
                }
            }
        }
    }
}
