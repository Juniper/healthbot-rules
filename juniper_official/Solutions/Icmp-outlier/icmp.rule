/*
 * Sends ICMP probes to user specified destination host and notifies anomalies 
 * when round trip time average response is above static or dynamic thresholds.
 * And also detects outlier across the devices in device group ML algorithms.
 * Three inputs control detection
 * 
 *   1) host-var, is a destination IP or host name where ICMP probes send 
 *      periodically.
 *   2) count-var, is a ICMP ping count. By default count is set to 1. 
 *   3) rtt-threshold-var, is the threshold that causes the rule to report an
 *      anomaly. By default it is 1000 micro seconds. This rule will set a
 *      dashboard color to red when ICMP response time is greater than static
 *      threshold 'rtt-threshold-var'.
 */
 healthbot {
    topic protocol.icmp {
        description "Sends ICMP probes to destination host and notify anomalies";
        synopsis "ICMP response analyzer";
        rule check-icmp-statistics {
            /*
             * Sends ICMP probes to destination host. Notifies via the dashboard
             * colors when the host is not reachable or response time is above
             * threshold {{rtt-threshold-var}} to red. The color is set
             * to yellow if response time is above dynamic threshold. Otherwise
             * the color is set to green.
             * 
             * Use host as key for rule.
             */
             keys host;
             /*
             * Sensor configuration to get data from network devices.
             */
             sensor icmp {
                synopsis "iAgent sensor definition";
                description "Ping rpc to collect data from network device";
                iAgent {
                    file icmp_statistics.yml;
                    table pingTable;
                    frequency 60s;
                    args count {
                        arg-value "{{count-var}}";
                    }
                    args host {
                        arg-value "{{host-var}}";
                    }
                }
            }
            field host {
                sensor icmp {
                    path host;
                }
                type string;
            }
            field packet-loss-percent {
                sensor icmp {
                    path packet-loss;
                }
                type integer;
            }
            field rtt {
                sensor icmp {
                    path rtt-average;
                }
                type integer;
            }
            function micro-milli {
               path micro_milli.py;
               method rtt_micro_milli;
               argument micros {
                  mandatory;
               }
               description "This function converts microseconds to milliseconds";
            }
            field dt-response-time {
                formula {
                    dynamic-threshold {
                        algorithm k-means;
                        learning-period 7d;
                        pattern-periodicity 1h;
                        field-name "$rtt-average-ms";
                    }
                }
                type integer;
                description "Dynamic threshold for field rtt-average-ms";
            }
            field rtt-average-ms {              
               formula {                       
                  user-defined-function {     
                     function-name micro-milli;
                     argument micros "$rtt";
                  }                           
               }                               
               type float;                   
               description "Round trip time";  
            }                   
            field rtt-threshold {
                constant {
                    value "{{rtt-threshold-var}}";
                }
                type string;
                description "RTT response time static threshold";
            }
            trigger packet-loss {
                synopsis "ICMP packet loss KPI";
                description "Sets health based on the packet loss";
                frequency 60s;
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the packet ($packet-loss-percent) is 100.
                 */
                term is-device-not-reachable {
                    when {
                        equal-to "$packet-loss-percent" 100 {
                            time-range 2m;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Host $host not reachable";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the packet ($packet-loss-percent) is more than 0.
                 */
                term is-device-up {
                    when {
                        greater-than "$packet-loss-percent" 0 {
                            time-range 2m;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "Host $host reachable and  $packet-loss-percent % packet loss";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term no-packet-loss {
                    then {
                        status {
                            color green;
                            message "Host $host reachable and  $packet-loss-percent % packet loss";
                        }
                    }
                }
            }
            trigger round-trip-time {
                synopsis "Round trip time KPI";
                description "Sets health based on the RTT";
                frequency 60s;
                /*
                 * Sets color to red and sends out an anomaly notification
                 * when the response time ($rtt-average-ms) is more than static
                 * threshold ($rtt-threshold).
                 */
                term is-rtt-fine {
                    when {
                        greater-than-or-equal-to "$rtt-average-ms" "$rtt-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "Round trip time($rtt-average-ms ms) to $host is above static threshold";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the response time ($rtt-average-ms) is more than dynamic
                 * threshold ($dt-response-time).
                 */
                term is-rtt-medium {
                    when {
                        equal-to "$dt-response-time" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "Round trip time($rtt-average-ms ms) to $host is above dynamic threshold";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term rtt-normal {
                    then {
                        status {
                            color green;
                            message "Round trip time($rtt-average-ms ms) to $host is normal";
                        }
                    }
                }
            }
            variable count-var {
                value 1;
                type sensor-argument;
                description "Input ICMP probe count";
            }
            variable host-var {
                type sensor-argument;
                description "Input Destination host";
            }
            variable rtt-threshold-var {
                value 1;
                description "Input RTT response static threshold in milli seconds";
                type int;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 2.0.0;
                catalogue {
                    tier 2;
                }
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                releases 11.4 {
                                    release-support min-supported-release;
                                    platform All;
                                }
                            }
                        }
                    }
                }
            }
        }
        rule check-outlier {
            description "Detects ICMP outlier response time and notify anomalies";
            synopsis "ICMP outlier analyzer";
            rule-frequency 60s;
            network-rule;
            field rtt-ol {
                formula {
                    outlier-detection {
                        algorithm {
                            dbscan {
                                sensitivity {
                                    level low;
                                }
                                learning-period 30m;
                            }
                        }
                        dataset "{{rtt-xpath}}";
                    }
                }
                type string;
                description "Outlier detection of devices in a group using xpath";
            }
            trigger icmp-outlier-detection {
                synopsis "ICMP outlier KPI";
                description "Sets health based on the RTT average response time across devices";
                frequency 60s;
                /*
                 * Sets color to red and sends out an anomaly notification
                 * when outlier detected by algorithm across devices.
                 */
                term is-outlier-detected {
                    when {
                        equal-to "$rtt-ol-is-outlier" 1;
                    }
                    then {
                        status {
                            color red;
                            message "Outlier detected on $rtt-ol-device";
                        }
                    }
                }
                /*
                 * Sets color to green when rtt average time is more or less
                 * across devices.
                 */
                term no-outlier {
                    when {
                        equal-to "$rtt-ol-is-outlier" 0;
                    }
                    then {
                        status {
                            color green;
                            message "No outlier detected on $rtt-ol-device";
                        }
                    }
                }
            }
            variable rtt-xpath {
                value .*;
                type string;
                description "Input xpath of devices to be in outlier detection format e.g. /device-group[device-group-name=core]/device[device-id=R0]/topic[topic-name=protocol.icmp]/rule[rule-name=check-icmp-statistics]/rtt-average-ms,/device-group[device-group-name=core]/device[device-id=R1]/topic[topic-name=protocol.icmp]/rule[rule-name=check-icmp-statistics]/rtt-average-ms,/device-group[device-group-name=core]/device[device-id=R2]/topic[topic-name=protocol.icmp]/rule[rule-name=check-icmp-statistics]/rtt-average-ms";
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 2.0.0;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                releases 11.4 {
                                    release-support min-supported-release;
                                    platform All;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
