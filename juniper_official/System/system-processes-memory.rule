/*
 * Detects junos processes (daemons) memory utilization threshold breaches and
 * notifies when anomalies are found.
 * Three inputs control detection
 *
 *   1) process-name-input, is a regular expression that matches the daemons that you
 *      would like to monitor. By default it's '.*', which matches all daemons.
 *      Use something like 'rpd|dfwd|dcd' to match only routing, firewall and
 *      interface daemons.
 *
 *   2) process-memory-high-threshold, is the threshold that causes the rule
 *      to report an anomaly. By default it's 80% of daemon memory utilization.
 *      This rule will set a dashboard color to red when daemon memory
 *      utilization exceed high threshold 'process-memory-high-threshold'
 *      for a period of 5 minutes.
 *
 *   3) process-memory-low-threshold, is the threshold that causes the rule to
 *      report an anomaly. By default it's 50% of daemon memory utilization.
 *      This rule will set a dashboard color to red when daemon memory
 *      utilization exceed low threshold 'process-memory-low-threshold'
 *      for a period of 5 minutes. Otherwise color is set to green.
 */
healthbot {
    topic system.processes {
        description "Monitors system statistics i.e. CPU, memory, storage, processes & queues and notifies anomalies";
        synopsis "System statistics analyzer";
        rule check-process-memory {
            /*
             * Monitors *all* the daemons memory utilization. Notifies via the
             * dashboard colors when the daemon memory utilization exceed by
             * {{process-memory-high-threshold}} for every collected metric
             * during a 5 minute time range (red). The color is set to yellow
             * if we see daemon memory utilization exceed
             * {{process-memory-low-threshold}} for every collected metric
             * during a 5 minutes time range.
             *
             * Use daemon name and pid as key for rule.
             */
            keys [ daemon pid ];
            synopsis "System processes memory utilization analyzer";
            description "Collects system process's memory utilization periodically and notifies anomalies when daemon memory usage exceed threshold";
            function decimal_to_percent {
                path generic_functions.py;
                method decimal_to_percent;
                argument numerator {
                    mandatory;
                }
                argument denominator {
                    mandatory;
                }
            }
            function mem_common_form {
                description "Function mem_common_form returns memory utilization";
                path system-processes.py;
                method mem_common_form;
                argument mem;
            }
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor systemprocexttable {
                synopsis "System processes memory iAgent sensor definition";
                description "iAgent netconf rpc/cli command sensor to collect data from network device";
                iAgent {
                    file system-proc-ext.yml;
                    table SystemProcExtTable;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field allocated-memory {
                formula {
                    user-defined-function {
                        function-name mem_common_form;
                        argument mem "$size";
                    }
                }
                type integer;
                description "Allocated memory for each daemon";
            }
            field daemon {
                sensor systemprocexttable {
                    path cmd;
                }
                type string;
                description "Daemon to be monitored";
            }
            field max-threshold {
                constant {
                    value "{{process-memory-high-threshold}}";
                }
                type integer;
                description "Daemon memory max threshold";
            }
            field min-threshold {
                constant {
                    value "{{process-memory-low-threshold}}";
                }
                type integer;
                description "Daemon memory low threshold";
            }
            field pid {
                sensor systemprocexttable {
                    path pid;
                }
                type string;
                description "PID to be monitored";
            }
            field process-name {
                constant {
                    value "{{process-name-input}}";
                }
                type string;
                description "Selected daemon to be monitored";
            }
            field res {
                sensor systemprocexttable {
                    path res;
                }
                type string;
                description "Resident memory of daemon";
            }
            field size {
                sensor systemprocexttable {
                    path size;
                }
                type string;
                description "Daemon memory size";
            }
            field used-memory {
                formula {
                    user-defined-function {
                        function-name mem_common_form;
                        argument mem "$res";
                    }
                }
                type integer;
                description "Used memory of each daemon";
            }
            field used-percent {
                formula {
                    user-defined-function {
                        function-name decimal_to_percent;
                        argument numerator "$used-memory";
                        argument denominator "$allocated-memory";
                    }
                }
                type float;
                description "Memory used in percent for each daemon";
            }
            /*
             * Anomaly detection logic.
             */
            trigger processes-memory-utilization {
                synopsis "System prcoesses memory utilization kpi";
                description "Sets health based on system processes memory utilization";
                frequency 1.5offset;
                /*
                 * Skips evaluation for unmonitored daemons
                 */
                term skiping-undefined-processes {
                    when {
                        does-not-match-with "$daemon" "$process-name";
                    }
                }
                term is-memory-utilization-abnormal {
                    when {
                        greater-than-or-equal-to "$used-percent" "$max-threshold" {
                            time-range 5offset;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$daemon memory utilization($used-percent) is above high threshold($max-threshold)";
                        }
                    }
                }
                term is-memory-utilization-middle {
                    when {
                        greater-than-or-equal-to "$used-percent" "$min-threshold" {
                            time-range 5offset;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$daemon memory utilization($used-percent) is in middle range(>=$min-threshold, <=$max-threshold)";
                        }
                    }
                }
                term is-memory-utilization-normal {
                    then {
                        status {
                            color green;
                            message "$daemon memory utilization($used-percent) is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable process-memory-high-threshold {
                value 80;
                description "Daemon memory high threshold: Utilization increase between metrics, before we report anomaly";
                type int;
            }
            variable process-memory-low-threshold {
                value 50;
                description "Daemon memory low threshold: Utilization increase between metrics, before we report anomaly";
                type int;
            }
            variable process-name-input {
                value .*;
                description "Demon name to monitor, regular regular expression, e.g. 'rpd|dfwd|dcd'";
                type string;
            }
            rule-properties {
                version 2;
                contributor juniper;
                supported-healthbot-version 1.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products MX {
                                platforms All {
                                    releases 15.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products PTX {
                                platforms All {
                                    releases 15.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products QFX {
                                platforms All {
                                    releases 15.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products EX {
                                platforms All {
                                    releases 15.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products ACX {
                                platforms All {
                                    releases 15.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                            products SRX {
                                platforms All {
                                    releases 15.2R1 {
                                        release-support min-supported-release;
                                    }
                                }							
                            }
                        }
                    }
                }
                helper-files other {
                    list-of-files [ generic_functions.py system-proc-ext.yml system-processes.py ];
                }
            }
        }
    }
}
