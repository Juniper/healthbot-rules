/*
 * Moniters PSM power usage,temperature,state and notifies when anomalies are found.
 * 
 * Two inputs control detection
 *
 *   1) "psm-power-remaining-threshold" is the threshold that causes the
 *      rule to report an anomaly. By default it's 20.
 * 
 *   2) "psm" is the power module,it can be psm0 or psm1.
 *      
 */
healthbot {
    topic chassis {
        rule check-psm-power-usage-state-temp {
            /*
             * Monitors PSM power usage,temperature,state and notifies via dashboard, red color 
             * when threshold is exceeded else green.
			 *
             * Use PSM as key for rule.
             */		
            keys psm;
            synopsis "Chassis psm power check";
            description "Collects PSM power usage periodically and notifies anomaly when power usage exceeds threshold";
            /*
             * Sensor configuration to get data from network devices.
             */			
            sensor components-oc {
                synopsis "Chassis components sensor definition";
                description "open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /components/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */			
            field psm {
                sensor components-oc {
                    where "/components/component/@name =~ /{{psm}}/";
                    path "/components/component/@name";
                }
                type string;
            }
            field psm-power-capacity-maximum {
                sensor components-oc {
                    where "/components/component/properties/property/@name == 'power-capacity-maximum'";
                    path /components/component/properties/property/state/value;
                }
                type integer;
            }
            field psm-power-capacity-usage {
                sensor components-oc {
                    where "/components/component/properties/property/@name == 'power-capacity-usage'";
                    path /components/component/properties/property/state/value;
                }
                type integer;
            }
            field psm-state {
                sensor components-oc {
                    where "/components/component/properties/property/@name == 'state'";
                    path /components/component/properties/property/state/value;
                }
                type string;
            }
            field psm-temperature {
                sensor components-oc {
                    where "/components/component/properties/property/@name == 'Temperature'";
                    path /components/component/properties/property/state/value;
                }
                type string;
            }
            field psm-power-remaining-in-percentage {
                formula {
                    eval {
                        expression "( ( $psm-power-capacity-maximum - $psm-power-capacity-usage ) / $psm-power-capacity-maximum ) * 100";
                    }
                }
                type integer;
                description "Stores remaining power for psm using UDF";
            }
            field psm-power-usage-threshold {
                constant {
                    value "{{psm-power-remaining-threshold}}";
                }
                type integer;
                description "psm power usage threshold";
            }
            /*
             * Anomaly detection logic.
             */			
            trigger psm-state {
                frequency 1offset;
                term state-is-online {
                    when {
                        matches-with "$psm-state" online {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color green;
                            message "$psm is $psm-state";
                        }
                    }
                }
                term state-is-not-online {
                    when {
                        matches-with "$psm-state" offline {
                            ignore-case;
                        }
                    }				
                    then {
                        status {
                            color red;
                            message "$psm is $psm-state";
                        }
                    }
                }
            }
            trigger psm-temperature {
                frequency 1offset;
                term Term_1 {
                    then {
                        status {
                            color green;
                            message "$psm temperature is $psm-temperature";
                        }
                    }
                }
            }
            trigger psm-power-usage {
                synopsis "PSM power usage KPI";
                description "Sets health based on increasing psm power usage";
                frequency 1offset;
                term is-power-usage-abnormal {
                    when {
                        less-than "$psm-power-remaining-in-percentage" "$psm-power-usage-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "PSM power usage abnormal! only $psm-power-remaining-in-percentage % of power remaining for $psm";
                        }
                    }
                }
                term power-usage-normal {
                    when {
                        matches-with "$psm-state" online {
                            ignore-case;
                        }
                    }				
                    then {
                        status {
                            color green;
                            message "PSM power usage is normal. $psm-power-remaining-in-percentage % of power remaining for $psm";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */			
            variable psm-power-remaining-threshold {
                value 20;
                description "psm remaining power threshold percentage";
                type int;
            }
            variable psm {
                value "^PSM[0-1]$";
                description "Enter PSM to be monitored";
                type string;
            }			
            rule-properties {
                version 1;
                contributor juniper;
                category basic;
                supported-healthbot-version 4.2.0;
                supported-devices {
                    juniper {
                         operating-system junosEvolved {
                             products ACX {
                                 platforms All {
                                     releases 22.3R1 {
                                         release-support min-supported-release;
                                     }
                                 }
                             }
                         }						
                    }
                }
            }
        }
    }
}	