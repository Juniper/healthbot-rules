/*
 * Monitors PSM power usage,state and notifies when anomalies are found
 * 
 * Three inputs control detection
 *
 *   1) "psm-power-high-threshold" is the threshold that causes the
 *      rule to report an anomaly. By default it's 80.
 *   2) "psm-power-low-threshold" is the threshold that causes the
 *      rule to report an anomaly. By default it's 50.
 *   3) "psm" is the power module,it can be psm0 or psm1.
 *
 * Requirement 14 (https://paragon-automation.atlassian.net/browse/REQ-14)
 *      
 */
healthbot {
    topic hardware.chassis {
        rule check-psm-power-usage-state {
            /*
             * Monitors PSM power usage,state and notifies via dashboard, red color 
             * when threshold is exceeded else green.
			 *
             * Use PSM as key for rule.
             */		
            keys psm;
            synopsis "Chassis psm power check";
            description "Collects PSM power properties periodically and notifies anomaly when exceeds threshold";
            /*
             * Sensor configuration to get data from network devices.
             */			
            sensor components-oc {
                synopsis "Chassis components sensor definition";
                description "open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /components/component;
                    frequency 60s;
                }
            }
            sensor components-oc-platform {
                open-config {
                    sensor-name /components;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */			
            field power-dc-output {
                sensor components-oc {
                    path /components/component/power-supply/state/output-power;
                }
                sensor components-oc-platform {
                    where "/components/component/properties/property/@name == 'power-dc-output'";
                    path /components/component/properties/property/state/value;
                }
                type integer;
                description "PSM DC output";
            }
            field psm {
                sensor components-oc {
                    where "/components/component/@name =~ /^PSM[{{psm}}]$|^PEM[{{psm}}]$/";
                    path "/components/component/@name";
                }
                sensor components-oc-platform {
                    where "/components/component/@name =~ /^PSM[{{psm}}]$|^PEM[{{psm}}]$/";
                    path "/components/component/@name";
                }
                type string;
                description "Power supply module";
            }
            field psm-power-capacity-maximum {
                sensor components-oc {
                    path /components/component/power-supply/state/capacity;
                }
                sensor components-oc-platform {
                    where "/components/component/properties/property/@name == 'power-capacity-maximum'";
                    path /components/component/properties/property/state/value;
                }
                type integer;
                description "PSM maximum power capacity";
            }
            field psm-power-usage {
                formula {
                    eval {
                        expression "( $power-dc-output / $psm-power-capacity-maximum ) * 100";
                    }
                }
                type float;
                description "Stores % of power usage by PSMs";
            }
            field psm-power-usage-high-threshold {
                constant {
                    value "{{psm-power-high-threshold}}";
                }
                type integer;
                description "psm power usage high threshold";
            }
            field psm-power-usage-low-threshold {
                constant {
                    value "{{psm-power-low-threshold}}";
                }
                type integer;
                description "psm power usage low threshold";
            }
            field psm-state {
                sensor components-oc {
                    where "/components/component/properties/property/@name == 'state'";
                    path /components/component/properties/property/state/value;
                }
                sensor components-oc-platform {
                    where "/components/component/properties/property/@name == 'state'";
                    path /components/component/properties/property/state/value;
                }
                type string;
                description "State of power supply module";
            }
            field psm-temperature {
                formula {
                    capture-groups {
                        field-name "$psm-temperature-degrees";
                        pattern "\d+";
                    }
                }
                type integer;
            }
            field psm-temperature-degrees {
                sensor components-oc {
                    where "/components/component/properties/property/@name == Temperature";
                    path /components/component/properties/property/state/value;
                }
                sensor components-oc-platform {
                    where "/components/component/properties/property/@name == 'temperature'";
                    path /components/component/properties/property/state/value;
                }
                type string;
            }
            field psm-temperature-high-threshold {
                constant {
                    value "{{psm-temperature-high-threshold}}";
                }
                type integer;
                description "PSM temperature high threshold";
            }
            field psm-temperature-low-threshold {
                constant {
                    value "{{psm-temperature-low-threshold}}";
                }
                type integer;
                description "PSM temperature low threshold";
            }
            /*
             * Anomaly detection logic.
             */			
            trigger psm-power-usage {
                synopsis "PSM power usage KPI";
                description "Sets health based on increasing psm power usage";
                frequency 1offset;
                /*
                 * Sets color to green when psm-power-usage is lesser than psm-power-usage-low-threshold
                 * 
                 */				
                term power-usage-normal {
                    when {
                        less-than "$psm-power-usage" "$psm-power-usage-low-threshold";
                        matches-with "$psm-state" Online {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color green;
                            message "$psm power usage($psm-power-usage) is normal";
                        }
                    }
                }
                /*
                 * Sets color to yellow when psm-power-usage is greater than psm-power-usage-low-threshold.
                 * 
                 */				
                term is-power-usage-exceeds-low-threshold {
                    when {
                        greater-than-or-equal-to "$psm-power-usage" "$psm-power-usage-low-threshold";
                        less-than "$psm-power-usage" "$psm-power-usage-high-threshold";
                    }
                    then {
                        status {
                            color yellow;
                            message "$psm power usage($psm-power-usage) is-equal-to or exceeds high threshold ($psm-power-usage-low-threshold)";
                        }
                    }
                }
                /*
                 * Sets color to red when psm-power-usage is greater than psm-power-usage-high-threshold
                 * 
                 */				
                term is-power-usage-exceeds-high-threshold {
                    when {
                        greater-than-or-equal-to "$psm-power-usage" "$psm-power-usage-high-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$psm power usage($psm-power-usage) is-equal-to or exceeds critical threshold ($psm-power-usage-high-threshold)";
                        }
                    }
                }
            }
            trigger psm-state {
                synopsis "PSM State KPI";
                description "Sets health based on PSM state";
                frequency 1offset;
                /*
                 * Sets color to green when state is online.
                 * 
                 */				
                term state-is-online {
                    when {
                        matches-with "$psm-state" online {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color green;
                            message "$psm is $psm-state";
                        }
                    }
                }
                /*
                 * Sets color to red when state is offline.
                 * 
                 */				
                term state-is-not-online {
                    when {
                        does-not-match-with "$psm-state" online {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$psm is $psm-state";
                        }
                        next;
                    }
                }
            }
            trigger psm-temperature {
                frequency 1offset;
                /*
                 * Sets color to green when psm-temperature is lesser than psm-temperature-low-threshold
                 * 
                 */				
                term temperature-is-normal {
                    when {
                        less-than "$psm-temperature" "$psm-temperature-low-threshold";
                    }
                    then {
                        status {
                            color green;
                            message "$psm temperature ($psm-temperature) is normal";
                        }
                    }
                }
                /*
                 * Sets color to yellow when psm-temperature is lesser than psm-temperature-high-threshold and 
                 * greater-than-or-equal-to psm-temperature-high-threshold			 
                 * 
                 */				
                term temperature-exceeds-low-threshold {
                    when {
                        greater-than-or-equal-to "$psm-temperature" "$psm-temperature-low-threshold";
                        less-than "$psm-temperature" "$psm-temperature-high-threshold";
                    }
                    then {
                        status {
                            color yellow;
                            message "$psm temperature ($psm-temperature) is equal-to or exceeds high threshold ($psm-temperature-low-threshold)";
                        }
                    }
                }
                /*
                 * Sets color to red when psm-temperature is exceeds psm-temperature-high-threshold
                 * 
                 */				
                term temperature-exceeds-high-threshold {
                    when {
                        greater-than-or-equal-to "$psm-temperature" "$psm-temperature-high-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$psm temperature ($psm-temperature) is equal-to or exceeds critical threshold ($psm-temperature-high-threshold)";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */			
            variable psm {
                value 0-9;
                description "Enter PSM to be monitored";
                type string;
            }
            variable psm-power-high-threshold {
                value 80;
                description "Power supply module usage high threshold ";
                type int;
            }
            variable psm-power-low-threshold {
                value 50;
                description "Power supply module usage low threshold ";
                type int;
            }
            variable psm-temperature-high-threshold {
                value 55;
                description "Default PSM high threshold is 55 degree celsius";
                type int;
            }
            variable psm-temperature-low-threshold {
                value 45;
                description "Default PSM low threshold is 45 degree celsius";
                type int;
            }
            rule-properties {
                version 1;
                contributor juniper;
                category basic;
                supported-healthbot-version 4.3.0;
                supported-devices {
                    juniper {
                        operating-system junosEvolved {
                            products ACX {
                                sensors components-oc;							
                                platforms ACX7024 {
                                    sensors components-oc;								
                                    releases 22.3R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms ACX7100 {
                                    sensors components-oc;								
                                    releases 22.3R1 {
                                        release-support min-supported-release;
                                    }
                                }								
                            }
                        }							
                        operating-system junos {							
                            products MX {
                                sensors components-oc-platform;
                                platforms MX304 {
                                    releases 23.4I {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX480 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                                platforms MX960 {
                                    releases 16.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
						}
                    }
                }
            }
        }
    }
}	