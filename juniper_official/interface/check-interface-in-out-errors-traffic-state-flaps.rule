/*
 * Monitors interface KPI's and notifies when anomalies are found.
 * Five inputs control detection
 * 
 *   1) interface-name, is a regular expression that matches the
 *      interfaces that you would like to monitor.  By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 * 
 *   2) errors-threshold-variable, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 1. This rule will set a dashboard
 *      color to red when *all* the error increases are greater than
 *      'in-errors-threshold-variable' for 180s. If it sees any errors increase for a
 *      period of less than 180s, it'll turn the color to yellow,
 *      otherwise color is set to green.
 *
 *   3) traffic-high-threshold, is the threshold that causes the rule to 
 *      report an anomaly.  By default it's 80. This rule will 
 *      set a dashboard color to red when *all* the input traffic is above 
 *      threshold for 180 seconds period. 
 *
 *   4) traffic-low-threshold, is the threshold that causes the rule to
 *      report an anomaly.  By default it's 50. This rule will
 *      set a dashboard color to yellow when *all* the input traffic is above
 *      threshold for 180 seconds period, otherwise color is set to green.
 *
 *   5) flaps-threshold-variable, is the threshold that causes the rule to report
 *      an anomaly.  By default it's 1. This rule will set a dashboard
 *      color to red when *all* the flap-increases are greater than
 *      'flaps-threshold-variable' for 180s. If it sees any flaps increase for a
 *      period of less than 180s, it'll turn the color to yellow,
 *      otherwise color is set to green. 
 */
healthbot {
    topic interfaces {
        description "Monitors and notify interface statistics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
		rule check-interface-in-out-errors-traffic-state-flaps {
            synopsis "Interface statistics analyzer";
            description "Collects the interface input fields like state,flaps,neighbor state etc periodically and notifies in case of anomalies";
            /*
             * Monitors the interface input fields.
             * Notifies via the dashboard colors when the field values increase by
             * more than the threshold values.
             * Use interface-name as key for rule.
             */			
            keys interface-name;
            /*
             * Sensor configuration to get data from network devices.
             */			
            sensor interfaces-oc {
                synopsis "Interface open-config sensor definition";
                description "Interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/interface/state;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */			
            field admin-state {
                sensor interfaces-oc {
                    where "/interfaces/interface/state/admin-status == UP";
                    path /interfaces/interface/state/admin-status;
                }
                type string;
                description "Interface admin status";
            }
            field flaps {
                sensor interfaces-oc {
                    path /interfaces/interface/state/counters/carrier-transitions;
                    zero-suppression;
                }
                type integer;
                description "Number of interface flaps";
            }
            field flaps-threshold {
                constant {
                    value "{{flaps-threshold-variable}}";
                }
                type integer;
                description "Flap count increase threshold";
            }
            field high-threshold {
                constant {
                    value "{{traffic-high-threshold}}";
                }
                type integer;
                description "Traffic high threshold";
            }
            field in-errors-count {
                sensor interfaces-oc {
                    path /interfaces/interface/state/counters/in-errors;
                    zero-suppression;
                }
                type integer;
                description "Number of input-errors";
            }
            field in-errors-threshold {
                constant {
                    value "{{errors-threshold-variable}}";
                }
                type integer;
                description "In errors count increase threshold";
            }
            field in-mbps {
                formula {
                    rate-of-change {
                        field-name "$in-octets";
                        multiplication-factor 0.000001;
                    }
                }
                type float;
                description "Derives mbps based (current in-octets - previous in-octets) divided by (current time - previous time) divided by mbps multiplication factor";
            }
            field in-octets {
                sensor interfaces-oc {
                    path /interfaces/interface/state/counters/if_in_octets;
                    zero-suppression;
                }
                type integer;
                description "Interface statistics counter (in-octets) value";
            }
            field in-util {
                formula {
                    eval {
                        expression "($in-mbps / $speed) * 100";
                    }
                }
                type float;
                description "Utilization in percentage which derived based on mbps and interface speed";
            }
            field interface-name {
                sensor interfaces-oc {
                    where "/interfaces/interface/@name =~ /{{interface-name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "Interfaces to be monitored";
            }
            field link-state {
                sensor interfaces-oc {
                    path /interfaces/interface/state/oper-status;
                }
                type string;
                description "Interfaces link operational status";
            }
            field low-threshold {
                constant {
                    value "{{traffic-low-threshold}}";
                }
                type integer;
                description "Traffic low threshold";
            }
            field out-errors-count {
                sensor interfaces-oc {
                    path /interfaces/interface/state/counters/out-errors;
                    zero-suppression;
                }
                type integer;
                description "This field shows interface field's value";
            }
            field out-errors-threshold {
                constant {
                    value "{{errors-threshold-variable}}";
                }
                type integer;
                description "Out errors count increase threshold";
            }
            field out-mbps {
                formula {
                    rate-of-change {
                        field-name "$out-octets";
                        multiplication-factor 0.000001;
                    }
                }
                type float;
                description "Derives mbps based (current out-octets - previous out-octets) divided by (current time - previous time) divided by mbps multiplication factor";
            }
            field out-octets {
                sensor interfaces-oc {
                    path /interfaces/interface/state/counters/if_out_octets;
                    zero-suppression;
                }
                type integer;
                description "Interface statistics counter (out-octets) value";
            }
            field out-util {
                formula {
                    eval {
                        expression "($out-mbps / $speed) * 100";
                    }
                }
                type float;
                description "Utilization in percentage which derived based on mbps and interface speed";
            }
            field speed {
                sensor interfaces-oc {
                    path /interfaces/interface/state/high-speed;
                }
                type integer;
                description "Interface speed";
            }
            /*
             * Anomaly detection logic.
             */			
            trigger interface-input-traffic {
                synopsis "Interface input traffic kpi";
                description "Sets health based on input traffic exceed threshold";
                frequency 2offset;
                /*
                 * Sets color to green when in-util is not increasing
                 */				
                term interface-in-traffic-normal {
                    when {
                        less-than "$in-util" "$low-threshold";
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name input traffic:$in-mbps mbps and $in-util % is normal";
                        }
                    }
                }				
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the interface input traffic($in-util) is
                 * above low threshold (low-threshold) for all points 
                 * in a 180 seconds period.
                 */					
                term is-interface-in-traffic-median {
                    when {
                        greater-than-or-equal-to "$in-util" "$low-threshold" {
                            time-range 3offset;
                            any;
                        }
                        less-than "$in-util" "$high-threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name input traffic:$in-mbps mbps and $in-util % is equal-to or exceeds high threshold";
                        }
                    }
                }
                /*
                 * Sets color to red and sends out an anomaly notification
                 * when the interface input traffic ($in-util) is
                 * above high threshold (high-threshold) for all  
                 * points in a 180 seconds period.
                 */				
                term is-interface-in-traffic-abnormal {
                    then {
                        status {
                            color red;
                            message "$interface-name input traffic:$in-mbps mbps and $in-util % is equal-to or exceeds critical threshold";
                        }
                    }
                }				

            }
            trigger interface-input-errors {
                synopsis "Interface input-errors kpi";
                description "Sets health based on the change in input-errors count";
                frequency 2offset;
                /*
                 * Sets color to green when in-errors-count is not increasing
                 */				
                term no-interface-in-errors {
                    when {
                        matches-with-previous "$in-errors-count";
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name input error count is normal.";
                        }
                    }
                }				
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the increase is at least once.
                 */				
                term is-interface-in-errors-median {
                    when {
                        increasing-at-least-by-value "$in-errors-count" {
                            value "$in-errors-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name input errors($in-errors-count) are intermittent";
                        }
                    }
                }
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * interface Input errors ($in-errors-count) count increases for 
                 * all points in 180 seconds period.
                 */				
                term is-interface-in-errors-abnormal {
                    when {
                        increasing-at-least-by-value "$in-errors-count" {
                            value "$in-errors-threshold";
                            time-range 3offset;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Input errors are increasing continuously on $interface-name, Error count is:$in-errors-count";
                        }
                    }
                }
            }
            trigger interface-link-flaps {
                synopsis "Link flaps KPI";
                description "Sets health based on the change in flap count";
                frequency 1offset;
                /*
                 * Sets color to green when interface is not flapping
                 */				
                term is-link-stable {
                    when {
                        matches-with-previous "$flaps";
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name is stable";
                        }
                    }
                }				

                /*
                 * Sets color to yellow when number of flaps are increasing-at-least-by-value flaps-threshold
                 */				
                term is-link-fluctuating {
                    when {
                        increasing-at-least-by-value "$flaps" {
                            value "$flaps-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name flaps($flaps) are intermittent";
                        }
                    }
                }
                /*
                 * Sets color to red when number of flaps are increasing-at-least-by-value flaps-threshold for 3offset
                 */				
                term is-link-flapping-consistently {
                    when {
                        increasing-at-least-by-value "$flaps" {
                            value "$flaps-threshold";
                            time-range 3offset;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Flaps are increasing continuously on $interface-name, flap count is:$flaps";
                        }
                    }
                }				
            }
            trigger interface-link-state {
                synopsis "link state kpi";
                description "Sets health based on link state";
                frequency 2offset;
                /*
                 * Sets color to green when both admin and link state is UP
                 */				
                term link-up {
                    when {
                        matches-with "$admin-state" UP;
                        matches-with "$link-state" UP;
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name link operator status is UP";
                        }
                    }
                }
                /*
                 * Sets color to red and sends out anomaly notification when 
                 * the interface oper state ($link-state) is down.
                 */				
                term is-link-down {
                    when {
                        matches-with "$admin-state" UP;
                        matches-with "$link-state" DOWN;
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name link operator status is DOWN";
                        }
                    }
                }				
            }
            trigger interface-output-errors {
                synopsis "Interface output-errors kpi";
                description "Sets health based on the change in output-errors count";
                frequency 2offset;
                /*
                 * Sets color to green when out-errors-count is not increasing
                 */				
                term no-interface-out-errors {
                    when {
                        matches-with-previous "$out-errors-count";
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name output errors count is normal.";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the increase is at least once.
                 */				
                term is-interface-out-errors-median {
                    when {
                        increasing-at-least-by-value "$out-errors-count" {
                            value "$out-errors-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name output errors ($out-errors-count) are intermittent";
                        }
                    }
                }
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the interface Output errors ($output-errors-count) count increases
                 * for all points in 180 seconds period.
                 */				
                term is-interface-out-errors-abnormal {
                    when {
                        increasing-at-least-by-value "$out-errors-count" {
                            value "$out-errors-threshold";
                            time-range 3offset;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Output errors are increasing continuously on $interface-name, Error count is:$out-errors-count";
                        }
                    }
                }				
            }
            trigger interface-output-traffic {
                synopsis "Interface output traffic kpi";
                description "Sets health based on output traffic exceed threshold";
                frequency 2offset;
                /*
                 * Sets color to green when out-util is not increasing
                 */ 				
                term is-interface-stats-normal {
                    when {
                        less-than "$out-util" "$low-threshold";
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name output traffic:$out-mbps mbps and $out-util % is normal";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the interface output traffic ($out-util)
                 * is above low threshold (low-threshold) for all
                 * points in 180 seconds period.
                 */				
                term is-interface-stats-median {
                    when {
                        greater-than-or-equal-to "$out-util" "$low-threshold" {
                            time-range 3offset;
                            any;
                        }
                        less-than "$out-util" "$high-threshold" {
                            time-range 3offset;
                            any;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name output traffic:$out-mbps mbps and $out-util % is equal-to or exceeds high threshold";
                        }
                    }
                }
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the interface output traffic ($out-util) is
                 * above high threshold (high-threshold) for all
                 * points in 180 seconds period.
                 */ 				
                term is-interface-stats-abnormal {
                    then {
                        status {
                            color red;
                            message "$interface-name output traffic:$out-mbps mbps and $out-util % is equal-to or exceeds critical threshold";
                        }
                    }
                }				
            }
            variable errors-threshold-variable {
                value 1;
                description "Interface in errors threshold: Number of errors increase between metrics, before we report anomaly";
                type int;
            }
            variable flaps-threshold-variable {
                value 1;
                description "Interface flaps threshold: Number of flap increase between metrics, before we report anomaly";
                type int;
            }
            variable interface-name {
                value .*;
                description "Interface names to monitor, regular expression, e.g. 'ge-.*'";
                type string;
            }
            variable traffic-high-threshold {
                value 80;
                description "Interface input traffic high threshold value in percentage";
                type int;
            }
            variable traffic-low-threshold {
                value 50;
                description "Interface output traffic high threshold value in percentage";
                type int;
            }
            rule-properties {
                version 1;
                contributor juniper;
                category basic;
                is-scaling-rule {
                    description "Fields: interface-name ; Directly impacted by number of interfaces in each network device";
                }
                supported-healthbot-version 4.2.0;
                supported-devices {
                    juniper {
                        operating-system junosEvolved {
                            products ACX {
                                platforms All {
                                    releases 22.3R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                        }
                    }
                }
            }
    	}	
    }
}	
	
		
		