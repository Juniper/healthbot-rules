/*
 * Monitors optical temperature and notifies anomalies.
 * One inputs control detection
 * 
 *   1) if-name, is a regular expression that matches the
 *      interfaces that you would like to monitor.    By default it's
 *      '.*', which matches all interfaces. Use something like 'ge.*' to
 *      match only gigabit ethernet interfaces.
 * 
 */
healthbot {
    topic interfaces {
        rule check-optical-temp-thresholds {
            /*
             * Monitors the temperature and notifies via dashboard if there are 
             * anomalies.
             * 
             * Use interface name as key for rule.
             */		
            keys interface-name;
            synopsis "Optical module temperature KPI";
            description "To check if the optical temperature is within limit";
            /*
             * Sensor configuration to get data from network devices.
             */			
            sensor temperature-thresholds-oc {
                open-config {
                    sensor-name /junos/system/linecard/optics/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */			
            field high-alarm-threshold {
                sensor temperature-thresholds-oc {
                    path /interfaces/interface/optics/module_temp_high_alarm_threshold;
                }
                type integer;
                description "Default Module temperature high alarm threshold.";
            }
            field high-warning-threshold {
                sensor temperature-thresholds-oc {
                    path /interfaces/interface/optics/module_temp_high_warning_threshold;
                }
                type integer;
                description "Default Module temperature high warning threshold.";
            }
            field interface-name {
                sensor temperature-thresholds-oc {
                    where "/interfaces/interface/@name =~ /{{if-name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "Name of the interface.";
            }
            field optical-temp {
                sensor temperature-thresholds-oc {
                    path /interfaces/interface/optics/module_temp;
                }
                type integer;
                description "Temperature of the Optical Module in degrees Centigrade.";
            }
            /*
             * Anomaly detection logic.
             */			
            trigger interface-optical-temperature {
                synopsis "high optical temperature";
                description "Sets health based on the optical temperature";
                frequency 1offset;
                /*
                 * Sets color to green when optical-temperature is less than high-warning-threshold.
                 */				
                term normal {
                    when {
                        less-than "$optical-temp" "$high-warning-threshold";
                    }				
                    then {
                        status {
                            color green;
                            message "$interface-name, temperature $optical-temp is normal.";
                        }
                    }
                }				
                /*
                 * Sets color to yellow when optical-temperature is greater-than-or-equal-to high-warning-threshold.
                 */				
                term greater-than-warning-threshold {
                    when {
                        greater-than-or-equal-to "$optical-temp" "$high-warning-threshold";
						less-than "$optical-temp" "$high-alarm-threshold";
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name,temperature $optical-temp exceeds default warning threshold ($high-warning-threshold)";
                        }
                    }
                }
                /*
                 * Sets color to red when optical-temperature is greater-than-or-equal-to high-alarm-threshold.
                 */				
                term greater-than-alarm-threshold {
                    when {
                        greater-than-or-equal-to "$optical-temp" "$high-alarm-threshold";
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name,temperature $optical-temp exceeds default alarm threshold ($high-alarm-threshold)";
                        }
                    }
                }				
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */			
            variable if-name {
                value .*;
                description "Name of the interface.";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                category advanced;
                is-scaling-rule {
                    description "Fields:interface-name ; Directly impacted by number of interfaces running in each network device";
                }
                supported-healthbot-version 4.2.0;
                supported-devices {
                    juniper {
                        operating-system junosEvolved {
                            products ACX {
                                platforms All {
                                    releases 22.3R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}	